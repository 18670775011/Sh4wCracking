"""
生成小红书app接口参数中的shield
"""

import base64
from functools import reduce
from operator import add, or_, xor

__apk_version__ = '6.68.1'


def bytes_to_int32(t):
    return [int.from_bytes(t[i * 4:(i + 1) * 4], byteorder='little') for i in range(len(t) // 4)]


def int32_to_bytes(t):
    return reduce(add, [bytearray((t % 2 ** 32).to_bytes(4, byteorder='little')) for t in t])


def byte_n(t, n):
    return bytearray(t.to_bytes(4, byteorder='little'))[n]


def read_int16(t):
    return int.from_bytes(t[:2], byteorder='little')


def read_int32(t):
    return int.from_bytes(t[:4], byteorder='little')


def b_swap32(t):
    return bytes_to_int32(int32_to_bytes([t])[::-1])[0]


data_a798 = bytearray('0123456789abcdef', encoding='utf-8')

dword_84060 = [0x63A5C663, 0x7C84F87C, 0x7799EE77, 0x7B8DF67B, 0xF20DFFF2,
               0x6BBDD66B, 0x6FB1DE6F, 0xC55491C5, 0x30506030, 0x1030201,
               0x67A9CE67, 0x2B7D562B, 0xFE19E7FE, 0xD762B5D7, 0xABE64DAB,
               0x769AEC76, 0xCA458FCA, 0x829D1F82, 0xC94089C9, 0x7D87FA7D,
               0xFA15EFFA, 0x59EBB259, 0x47C98E47, 0xF00BFBF0, 0xADEC41AD,
               0xD467B3D4, 0xA2FD5FA2, 0xAFEA45AF, 0x9CBF239C, 0xA4F753A4,
               0x7296E472, 0xC05B9BC0, 0xB7C275B7, 0xFD1CE1FD, 0x93AE3D93,
               0x266A4C26, 0x365A6C36, 0x3F417E3F, 0xF702F5F7, 0xCC4F83CC,
               0x345C6834, 0xA5F451A5, 0xE534D1E5, 0xF108F9F1, 0x7193E271,
               0xD873ABD8, 0x31536231, 0x153F2A15, 0x40C0804, 0xC75295C7,
               0x23654623, 0xC35E9DC3, 0x18283018, 0x96A13796, 0x50F0A05,
               0x9AB52F9A, 0x7090E07, 0x12362412, 0x809B1B80, 0xE23DDFE2,
               0xEB26CDEB, 0x27694E27, 0xB2CD7FB2, 0x759FEA75, 0x91B1209,
               0x839E1D83, 0x2C74582C, 0x1A2E341A, 0x1B2D361B, 0x6EB2DC6E,
               0x5AEEB45A, 0xA0FB5BA0, 0x52F6A452, 0x3B4D763B, 0xD661B7D6,
               0xB3CE7DB3, 0x297B5229, 0xE33EDDE3, 0x2F715E2F, 0x84971384,
               0x53F5A653, 0xD168B9D1, 0, 0xED2CC1ED, 0x20604020,
               0xFC1FE3FC, 0xB1C879B1, 0x5BEDB65B, 0x6ABED46A, 0xCB468DCB,
               0xBED967BE, 0x394B7239, 0x4ADE944A, 0x4CD4984C, 0x58E8B058,
               0xCF4A85CF, 0xD06BBBD0, 0xEF2AC5EF, 0xAAE54FAA, 0xFB16EDFB,
               *bytes_to_int32(
                   [0x43, 0x86, 0xC5, 0x43, 0x4D, 0x9A, 0xD7, 0x4D, 0x33, 0x66, 0x55, 0x33, 0x85, 0x11, 0x94, 0x85,
                    0x45, 0x8A, 0xCF, 0x45, 0xF9, 0xE9, 0x10, 0xF9, 2, 4, 6, 2, 0x7F, 0xFE, 0x81, 0x7F, 0x50, 0xA0,
                    0xF0, 0x50, 0x3C, 0x78, 0x44, 0x3C, 0x9F, 0x25, 0xBA, 0x9F, 0xA8, 0x4B, 0xE3, 0xA8, 0x51, 0xA2,
                    0xF3, 0x51, 0xA3, 0x5D, 0xFE, 0xA3, 0x40, 0x80, 0xC0, 0x40, 0x8F, 5, 0x8A, 0x8F, 0x92, 0x3F, 0xAD,
                    0x92, 0x9D, 0x21, 0xBC, 0x9D, 0x38, 0x70, 0x48, 0x38, 0xF5, 0xF1, 4, 0xF5, 0xBC, 0x63, 0xDF, 0xBC,
                    0xB6, 0x77, 0xC1, 0xB6, 0xDA, 0xAF, 0x75, 0xDA, 0x21, 0x42, 0x63, 0x21, 0x10, 0x20, 0x30, 0x10,
                    0xFF, 0xE5, 0x1A, 0xFF, 0xF3, 0xFD, 0xE, 0xF3, 0xD2, 0xBF, 0x6D, 0xD2, 0xCD, 0x81, 0x4C, 0xCD, 0xC,
                    0x18, 0x14, 0xC, 0x13, 0x26, 0x35, 0x13, 0xEC, 0xC3, 0x2F, 0xEC, 0x5F, 0xBE, 0xE1, 0x5F, 0x97, 0x35,
                    0xA2, 0x97, 0x44, 0x88, 0xCC, 0x44, 0x17, 0x2E, 0x39, 0x17, 0xC4, 0x93, 0x57, 0xC4, 0xA7, 0x55,
                    0xF2, 0xA7, 0x7E, 0xFC, 0x82, 0x7E, 0x3D, 0x7A, 0x47, 0x3D, 0x64, 0xC8, 0xAC, 0x64, 0x5D, 0xBA,
                    0xE7, 0x5D, 0x19, 0x32, 0x2B, 0x19, 0x73, 0xE6, 0x95, 0x73, 0x60, 0xC0, 0xA0, 0x60, 0x81, 0x19,
                    0x98, 0x81, 0x4F, 0x9E, 0xD1, 0x4F, 0xDC, 0xA3, 0x7F, 0xDC, 0x22, 0x44, 0x66, 0x22, 0x2A, 0x54,
                    0x7E, 0x2A, 0x90, 0x3B, 0xAB, 0x90, 0x88, 0xB, 0x83, 0x88, 0x46, 0x8C, 0xCA, 0x46, 0xEE, 0xC7, 0x29,
                    0xEE, 0xB8, 0x6B, 0xD3, 0xB8, 0x14, 0x28, 0x3C, 0x14, 0xDE, 0xA7, 0x79, 0xDE, 0x5E, 0xBC, 0xE2,
                    0x5E, 0xB, 0x16, 0x1D, 0xB, 0xDB, 0xAD, 0x76, 0xDB, 0xE0, 0xDB, 0x3B, 0xE0, 0x32, 0x64, 0x56, 0x32,
                    0x3A, 0x74, 0x4E, 0x3A, 0xA, 0x14, 0x1E, 0xA, 0x49, 0x92, 0xDB, 0x49, 6, 0xC, 0xA, 6, 0x24, 0x48,
                    0x6C, 0x24, 0x5C, 0xB8, 0xE4, 0x5C, 0xC2, 0x9F, 0x5D, 0xC2, 0xD3, 0xBD, 0x6E, 0xD3, 0xAC, 0x43,
                    0xEF, 0xAC, 0x62, 0xC4, 0xA6, 0x62, 0x91, 0x39, 0xA8, 0x91, 0x95, 0x31, 0xA4, 0x95, 0xE4, 0xD3,
                    0x37, 0xE4, 0x79, 0xF2, 0x8B, 0x79, 0xE7, 0xD5, 0x32, 0xE7, 0xC8, 0x8B, 0x43, 0xC8, 0x37, 0x6E,
                    0x59, 0x37, 0x6D, 0xDA, 0xB7, 0x6D, 0x8D, 1, 0x8C, 0x8D, 0xD5, 0xB1, 0x64, 0xD5, 0x4E, 0x9C, 0xD2,
                    0x4E, 0xA9, 0x49, 0xE0, 0xA9, 0x6C, 0xD8, 0xB4, 0x6C, 0x56, 0xAC, 0xFA, 0x56, 0xF4, 0xF3, 7, 0xF4,
                    0xEA, 0xCF, 0x25, 0xEA, 0x65, 0xCA, 0xAF, 0x65, 0x7A, 0xF4, 0x8E, 0x7A, 0xAE, 0x47, 0xE9, 0xAE, 8,
                    0x10, 0x18, 8, 0xBA, 0x6F, 0xD5, 0xBA, 0x78, 0xF0, 0x88, 0x78, 0x25, 0x4A, 0x6F, 0x25, 0x2E, 0x5C,
                    0x72, 0x2E, 0x1C, 0x38, 0x24, 0x1C, 0xA6, 0x57, 0xF1, 0xA6, 0xB4, 0x73, 0xC7, 0xB4, 0xC6, 0x97,
                    0x51, 0xC6, 0xE8, 0xCB, 0x23, 0xE8, 0xDD, 0xA1, 0x7C, 0xDD, 0x74, 0xE8, 0x9C, 0x74, 0x1F, 0x3E,
                    0x21, 0x1F, 0x4B, 0x96, 0xDD, 0x4B, 0xBD, 0x61, 0xDC, 0xBD, 0x8B, 0xD, 0x86, 0x8B, 0x8A, 0xF, 0x85,
                    0x8A, 0x70, 0xE0, 0x90, 0x70, 0x3E, 0x7C, 0x42, 0x3E, 0xB5, 0x71, 0xC4, 0xB5, 0x66, 0xCC, 0xAA,
                    0x66, 0x48, 0x90, 0xD8, 0x48, 3, 6, 5, 3, 0xF6, 0xF7, 1, 0xF6, 0xE, 0x1C, 0x12, 0xE, 0x61, 0xC2,
                    0xA3, 0x61, 0x35, 0x6A, 0x5F, 0x35, 0x57, 0xAE, 0xF9, 0x57, 0xB9, 0x69, 0xD0, 0xB9, 0x86, 0x17,
                    0x91, 0x86, 0xC1, 0x99, 0x58, 0xC1, 0x1D, 0x3A, 0x27, 0x1D, 0x9E, 0x27, 0xB9, 0x9E, 0xE1, 0xD9,
                    0x38, 0xE1, 0xF8, 0xEB, 0x13, 0xF8, 0x98, 0x2B, 0xB3, 0x98, 0x11, 0x22, 0x33, 0x11, 0x69, 0xD2,
                    0xBB, 0x69, 0xD9, 0xA9, 0x70, 0xD9, 0x8E, 7, 0x89, 0x8E, 0x94, 0x33, 0xA7, 0x94, 0x9B, 0x2D, 0xB6,
                    0x9B, 0x1E, 0x3C, 0x22, 0x1E, 0x87, 0x15, 0x92, 0x87, 0xE9, 0xC9, 0x20, 0xE9, 0xCE, 0x87, 0x49,
                    0xCE, 0x55, 0xAA, 0xFF, 0x55, 0x28, 0x50, 0x78, 0x28, 0xDF, 0xA5, 0x7A, 0xDF, 0x8C, 3, 0x8F, 0x8C,
                    0xA1, 0x59, 0xF8, 0xA1, 0x89, 9, 0x80, 0x89, 0xD, 0x1A, 0x17, 0xD, 0xBF, 0x65, 0xDA, 0xBF, 0xE6,
                    0xD7, 0x31, 0xE6, 0x42, 0x84, 0xC6, 0x42, 0x68, 0xD0, 0xB8, 0x68, 0x41, 0x82, 0xC3, 0x41, 0x99,
                    0x29, 0xB0, 0x99, 0x2D, 0x5A, 0x77, 0x2D, 0xF, 0x1E, 0x11, 0xF, 0xB0, 0x7B, 0xCB, 0xB0, 0x54, 0xA8,
                    0xFC, 0x54, 0xBB, 0x6D, 0xD6, 0xBB, 0x16, 0x2C, 0x3A, 0x16]
               )]

dword_84460 = [0x6363A5C6, *bytes_to_int32(
    [0xF8, 0x84, 0x7C, 0x7C, 0xEE, 0x99, 0x77, 0x77, 0xF6, 0x8D, 0x7B, 0x7B, 0xFF, 0xD, 0xF2, 0xF2, 0xD6, 0xBD, 0x6B,
     0x6B, 0xDE, 0xB1, 0x6F, 0x6F, 0x91, 0x54, 0xC5, 0xC5, 0x60, 0x50, 0x30, 0x30, 2, 3, 1, 1, 0xCE, 0xA9, 0x67, 0x67,
     0x56, 0x7D, 0x2B, 0x2B, 0xE7, 0x19, 0xFE, 0xFE, 0xB5, 0x62, 0xD7, 0xD7, 0x4D, 0xE6, 0xAB, 0xAB, 0xEC, 0x9A, 0x76,
     0x76, 0x8F, 0x45, 0xCA, 0xCA, 0x1F, 0x9D, 0x82, 0x82, 0x89, 0x40, 0xC9, 0xC9, 0xFA, 0x87, 0x7D, 0x7D, 0xEF, 0x15,
     0xFA, 0xFA, 0xB2, 0xEB, 0x59, 0x59, 0x8E, 0xC9, 0x47, 0x47, 0xFB, 0xB, 0xF0, 0xF0, 0x41, 0xEC, 0xAD, 0xAD, 0xB3,
     0x67, 0xD4, 0xD4, 0x5F, 0xFD, 0xA2, 0xA2, 0x45, 0xEA, 0xAF, 0xAF, 0x23, 0xBF, 0x9C, 0x9C, 0x53, 0xF7, 0xA4, 0xA4,
     0xE4, 0x96, 0x72, 0x72, 0x9B, 0x5B, 0xC0, 0xC0, 0x75, 0xC2, 0xB7, 0xB7, 0xE1, 0x1C, 0xFD, 0xFD, 0x3D, 0xAE, 0x93,
     0x93, 0x4C, 0x6A, 0x26, 0x26, 0x6C, 0x5A, 0x36, 0x36, 0x7E, 0x41, 0x3F, 0x3F, 0xF5, 2, 0xF7, 0xF7, 0x83, 0x4F,
     0xCC, 0xCC, 0x68, 0x5C, 0x34, 0x34, 0x51, 0xF4, 0xA5, 0xA5, 0xD1, 0x34, 0xE5, 0xE5, 0xF9, 8, 0xF1, 0xF1, 0xE2,
     0x93, 0x71, 0x71, 0xAB, 0x73, 0xD8, 0xD8, 0x62, 0x53, 0x31, 0x31, 0x2A, 0x3F, 0x15, 0x15, 8, 0xC, 4, 4, 0x95, 0x52,
     0xC7, 0xC7, 0x46, 0x65, 0x23, 0x23, 0x9D, 0x5E, 0xC3, 0xC3, 0x30, 0x28, 0x18, 0x18, 0x37, 0xA1, 0x96, 0x96, 0xA,
     0xF, 5, 5, 0x2F, 0xB5, 0x9A, 0x9A, 0xE, 9, 7, 7, 0x24, 0x36, 0x12, 0x12, 0x1B, 0x9B, 0x80, 0x80, 0xDF, 0x3D, 0xE2,
     0xE2, 0xCD, 0x26, 0xEB, 0xEB, 0x4E, 0x69, 0x27, 0x27, 0x7F, 0xCD, 0xB2, 0xB2, 0xEA, 0x9F, 0x75, 0x75, 0x12, 0x1B,
     9, 9, 0x1D, 0x9E, 0x83, 0x83, 0x58, 0x74, 0x2C, 0x2C, 0x34, 0x2E, 0x1A, 0x1A, 0x36, 0x2D, 0x1B, 0x1B, 0xDC, 0xB2,
     0x6E, 0x6E, 0xB4, 0xEE, 0x5A, 0x5A, 0x5B, 0xFB, 0xA0, 0xA0, 0xA4, 0xF6, 0x52, 0x52, 0x76, 0x4D, 0x3B, 0x3B, 0xB7,
     0x61, 0xD6, 0xD6, 0x7D, 0xCE, 0xB3, 0xB3, 0x52, 0x7B, 0x29, 0x29, 0xDD, 0x3E, 0xE3, 0xE3, 0x5E, 0x71, 0x2F, 0x2F,
     0x13, 0x97, 0x84, 0x84, 0xA6, 0xF5, 0x53, 0x53, 0xB9, 0x68, 0xD1, 0xD1, 0, 0, 0, 0, 0xC1, 0x2C, 0xED, 0xED, 0x40,
     0x60, 0x20, 0x20, 0xE3, 0x1F, 0xFC, 0xFC, 0x79, 0xC8, 0xB1, 0xB1, 0xB6, 0xED, 0x5B, 0x5B, 0xD4, 0xBE, 0x6A, 0x6A,
     0x8D, 0x46, 0xCB, 0xCB, 0x67, 0xD9, 0xBE, 0xBE, 0x72, 0x4B, 0x39, 0x39, 0x94, 0xDE, 0x4A, 0x4A, 0x98, 0xD4, 0x4C,
     0x4C, 0xB0, 0xE8, 0x58, 0x58, 0x85, 0x4A, 0xCF, 0xCF, 0xBB, 0x6B, 0xD0, 0xD0, 0xC5, 0x2A, 0xEF, 0xEF, 0x4F, 0xE5,
     0xAA, 0xAA, 0xED, 0x16, 0xFB, 0xFB, 0x86, 0xC5, 0x43, 0x43, 0x9A, 0xD7, 0x4D, 0x4D, 0x66, 0x55, 0x33, 0x33, 0x11,
     0x94, 0x85, 0x85, 0x8A, 0xCF, 0x45, 0x45, 0xE9, 0x10, 0xF9, 0xF9, 4, 6, 2, 2, 0xFE, 0x81, 0x7F, 0x7F, 0xA0, 0xF0,
     0x50, 0x50, 0x78, 0x44, 0x3C, 0x3C, 0x25, 0xBA, 0x9F, 0x9F, 0x4B, 0xE3, 0xA8, 0xA8, 0xA2, 0xF3, 0x51, 0x51, 0x5D,
     0xFE, 0xA3, 0xA3, 0x80, 0xC0, 0x40, 0x40, 5, 0x8A, 0x8F, 0x8F, 0x3F, 0xAD, 0x92, 0x92, 0x21, 0xBC, 0x9D, 0x9D,
     0x70, 0x48, 0x38, 0x38, 0xF1, 4, 0xF5, 0xF5, 0x63, 0xDF, 0xBC, 0xBC, 0x77, 0xC1, 0xB6, 0xB6, 0xAF, 0x75, 0xDA,
     0xDA, 0x42, 0x63, 0x21, 0x21, 0x20, 0x30, 0x10, 0x10, 0xE5, 0x1A, 0xFF, 0xFF, 0xFD, 0xE, 0xF3, 0xF3, 0xBF, 0x6D,
     0xD2, 0xD2, 0x81, 0x4C, 0xCD, 0xCD, 0x18, 0x14, 0xC, 0xC, 0x26, 0x35, 0x13, 0x13, 0xC3, 0x2F, 0xEC, 0xEC, 0xBE,
     0xE1, 0x5F, 0x5F, 0x35, 0xA2, 0x97, 0x97, 0x88, 0xCC, 0x44, 0x44, 0x2E, 0x39, 0x17, 0x17, 0x93, 0x57, 0xC4, 0xC4,
     0x55, 0xF2, 0xA7, 0xA7, 0xFC, 0x82, 0x7E, 0x7E, 0x7A, 0x47, 0x3D, 0x3D, 0xC8, 0xAC, 0x64, 0x64, 0xBA, 0xE7, 0x5D,
     0x5D, 0x32, 0x2B, 0x19, 0x19, 0xE6, 0x95, 0x73, 0x73, 0xC0, 0xA0, 0x60, 0x60, 0x19, 0x98, 0x81, 0x81, 0x9E, 0xD1,
     0x4F, 0x4F, 0xA3, 0x7F, 0xDC, 0xDC, 0x44, 0x66, 0x22, 0x22, 0x54, 0x7E, 0x2A, 0x2A, 0x3B, 0xAB, 0x90, 0x90, 0xB,
     0x83, 0x88, 0x88, 0x8C, 0xCA, 0x46, 0x46, 0xC7, 0x29, 0xEE, 0xEE, 0x6B, 0xD3, 0xB8, 0xB8, 0x28, 0x3C, 0x14, 0x14,
     0xA7, 0x79, 0xDE, 0xDE, 0xBC, 0xE2, 0x5E, 0x5E, 0x16, 0x1D, 0xB, 0xB, 0xAD, 0x76, 0xDB, 0xDB, 0xDB, 0x3B, 0xE0,
     0xE0, 0x64, 0x56, 0x32, 0x32, 0x74, 0x4E, 0x3A, 0x3A, 0x14, 0x1E, 0xA, 0xA, 0x92, 0xDB, 0x49, 0x49, 0xC, 0xA, 6, 6,
     0x48, 0x6C, 0x24, 0x24, 0xB8, 0xE4, 0x5C, 0x5C, 0x9F, 0x5D, 0xC2, 0xC2, 0xBD, 0x6E, 0xD3, 0xD3, 0x43, 0xEF, 0xAC,
     0xAC, 0xC4, 0xA6, 0x62, 0x62, 0x39, 0xA8, 0x91, 0x91, 0x31, 0xA4, 0x95, 0x95, 0xD3, 0x37, 0xE4, 0xE4, 0xF2, 0x8B,
     0x79, 0x79, 0xD5, 0x32, 0xE7, 0xE7, 0x8B, 0x43, 0xC8, 0xC8, 0x6E, 0x59, 0x37, 0x37, 0xDA, 0xB7, 0x6D, 0x6D, 1,
     0x8C, 0x8D, 0x8D, 0xB1, 0x64, 0xD5, 0xD5, 0x9C, 0xD2, 0x4E, 0x4E, 0x49, 0xE0, 0xA9, 0xA9, 0xD8, 0xB4, 0x6C, 0x6C,
     0xAC, 0xFA, 0x56, 0x56, 0xF3, 7, 0xF4, 0xF4, 0xCF, 0x25, 0xEA, 0xEA, 0xCA, 0xAF, 0x65, 0x65, 0xF4, 0x8E, 0x7A,
     0x7A, 0x47, 0xE9, 0xAE, 0xAE, 0x10, 0x18, 8, 8, 0x6F, 0xD5, 0xBA, 0xBA, 0xF0, 0x88, 0x78, 0x78, 0x4A, 0x6F, 0x25,
     0x25, 0x5C, 0x72, 0x2E, 0x2E, 0x38, 0x24, 0x1C, 0x1C, 0x57, 0xF1, 0xA6, 0xA6, 0x73, 0xC7, 0xB4, 0xB4, 0x97, 0x51,
     0xC6, 0xC6, 0xCB, 0x23, 0xE8, 0xE8, 0xA1, 0x7C, 0xDD, 0xDD, 0xE8, 0x9C, 0x74, 0x74, 0x3E, 0x21, 0x1F, 0x1F, 0x96,
     0xDD, 0x4B, 0x4B, 0x61, 0xDC, 0xBD, 0xBD, 0xD, 0x86, 0x8B, 0x8B, 0xF, 0x85, 0x8A, 0x8A, 0xE0, 0x90, 0x70, 0x70,
     0x7C, 0x42, 0x3E, 0x3E, 0x71, 0xC4, 0xB5, 0xB5, 0xCC, 0xAA, 0x66, 0x66, 0x90, 0xD8, 0x48, 0x48, 6, 5, 3, 3, 0xF7,
     1, 0xF6, 0xF6, 0x1C, 0x12, 0xE, 0xE, 0xC2, 0xA3, 0x61, 0x61, 0x6A, 0x5F, 0x35, 0x35, 0xAE, 0xF9, 0x57, 0x57, 0x69,
     0xD0, 0xB9, 0xB9, 0x17, 0x91, 0x86, 0x86, 0x99, 0x58, 0xC1, 0xC1, 0x3A, 0x27, 0x1D, 0x1D, 0x27, 0xB9, 0x9E, 0x9E,
     0xD9, 0x38, 0xE1, 0xE1, 0xEB, 0x13, 0xF8, 0xF8, 0x2B, 0xB3, 0x98, 0x98, 0x22, 0x33, 0x11, 0x11, 0xD2, 0xBB, 0x69,
     0x69, 0xA9, 0x70, 0xD9, 0xD9, 7, 0x89, 0x8E, 0x8E, 0x33, 0xA7, 0x94, 0x94, 0x2D, 0xB6, 0x9B, 0x9B, 0x3C, 0x22,
     0x1E, 0x1E, 0x15, 0x92, 0x87, 0x87, 0xC9, 0x20, 0xE9, 0xE9, 0x87, 0x49, 0xCE, 0xCE, 0xAA, 0xFF, 0x55, 0x55, 0x50,
     0x78, 0x28, 0x28, 0xA5, 0x7A, 0xDF, 0xDF, 3, 0x8F, 0x8C, 0x8C, 0x59, 0xF8, 0xA1, 0xA1, 9, 0x80, 0x89, 0x89, 0x1A,
     0x17, 0xD, 0xD, 0x65, 0xDA, 0xBF, 0xBF, 0xD7, 0x31, 0xE6, 0xE6, 0x84, 0xC6, 0x42, 0x42, 0xD0, 0xB8, 0x68, 0x68,
     0x82, 0xC3, 0x41, 0x41, 0x29, 0xB0, 0x99, 0x99, 0x5A, 0x77, 0x2D, 0x2D, 0x1E, 0x11, 0xF, 0xF, 0x7B, 0xCB, 0xB0,
     0xB0, 0xA8, 0xFC, 0x54, 0x54, 0x6D, 0xD6, 0xBB, 0xBB, 0x2C, 0x3A, 0x16, 0x16]
)]

dword_84860 = [0xC66363A5, 0xF87C7C84, 0xEE777799, 0xF67B7B8D, 0xFFF2F20D,
               0xD66B6BBD, 0xDE6F6FB1, 0x91C5C554, 0x60303050, 0x2010103,
               0xCE6767A9, 0x562B2B7D, 0xE7FEFE19, 0xB5D7D762, 0x4DABABE6,
               0xEC76769A, 0x8FCACA45, 0x1F82829D, 0x89C9C940, 0xFA7D7D87,
               0xEFFAFA15, 0xB25959EB, 0x8E4747C9, 0xFBF0F00B, 0x41ADADEC,
               0xB3D4D467, 0x5FA2A2FD, 0x45AFAFEA, 0x239C9CBF, 0x53A4A4F7,
               0xE4727296, 0x9BC0C05B, 0x75B7B7C2, 0xE1FDFD1C, 0x3D9393AE,
               0x4C26266A, 0x6C36365A, 0x7E3F3F41, 0xF5F7F702, 0x83CCCC4F,
               0x6834345C, 0x51A5A5F4, 0xD1E5E534, 0xF9F1F108, 0xE2717193,
               0xABD8D873, 0x62313153, 0x2A15153F, 0x804040C, 0x95C7C752,
               0x46232365, 0x9DC3C35E, 0x30181828, 0x379696A1, 0xA05050F,
               0x2F9A9AB5, 0xE070709, 0x24121236, 0x1B80809B, 0xDFE2E23D,
               0xCDEBEB26, 0x4E272769, 0x7FB2B2CD, 0xEA75759F, 0x1209091B,
               0x1D83839E, 0x582C2C74, 0x341A1A2E, 0x361B1B2D, 0xDC6E6EB2,
               0xB45A5AEE, 0x5BA0A0FB, 0xA45252F6, 0x763B3B4D, 0xB7D6D661,
               0x7DB3B3CE, 0x5229297B, 0xDDE3E33E, 0x5E2F2F71, 0x13848497,
               0xA65353F5, 0xB9D1D168, 0, 0xC1EDED2C, 0x40202060,
               0xE3FCFC1F, 0x79B1B1C8, 0xB65B5BED, 0xD46A6ABE, 0x8DCBCB46,
               0x67BEBED9, 0x7239394B, 0x944A4ADE, 0x984C4CD4, 0xB05858E8,
               0x85CFCF4A, 0xBBD0D06B, 0xC5EFEF2A, 0x4FAAAAE5, 0xEDFBFB16,
               0x864343C5, 0x9A4D4DD7, 0x66333355, 0x11858594, 0x8A4545CF,
               0xE9F9F910, 0x4020206, 0xFE7F7F81, 0xA05050F0, 0x783C3C44,
               0x259F9FBA, 0x4BA8A8E3, 0xA25151F3, 0x5DA3A3FE, 0x804040C0,
               0x58F8F8A, 0x3F9292AD, 0x219D9DBC, 0x70383848, 0xF1F5F504,
               0x63BCBCDF, 0x77B6B6C1, 0xAFDADA75, 0x42212163, 0x20101030,
               0xE5FFFF1A, 0xFDF3F30E, 0xBFD2D26D, 0x81CDCD4C, 0x180C0C14,
               0x26131335, 0xC3ECEC2F, 0xBE5F5FE1, 0x359797A2, 0x884444CC,
               0x2E171739, 0x93C4C457, 0x55A7A7F2, 0xFC7E7E82, 0x7A3D3D47,
               0xC86464AC, 0xBA5D5DE7, 0x3219192B, 0xE6737395, 0xC06060A0,
               0x19818198, 0x9E4F4FD1, 0xA3DCDC7F, 0x44222266, 0x542A2A7E,
               0x3B9090AB, 0xB888883, 0x8C4646CA, 0xC7EEEE29, 0x6BB8B8D3,
               0x2814143C, 0xA7DEDE79, 0xBC5E5EE2, 0x160B0B1D, 0xADDBDB76,
               0xDBE0E03B, 0x64323256, 0x743A3A4E, 0x140A0A1E, 0x924949DB,
               0xC06060A, 0x4824246C, 0xB85C5CE4, 0x9FC2C25D, 0xBDD3D36E,
               0x43ACACEF, 0xC46262A6, 0x399191A8, 0x319595A4, 0xD3E4E437,
               0xF279798B, 0xD5E7E732, 0x8BC8C843, 0x6E373759, 0xDA6D6DB7,
               0x18D8D8C, 0xB1D5D564, 0x9C4E4ED2, 0x49A9A9E0, 0xD86C6CB4,
               0xAC5656FA, 0xF3F4F407, 0xCFEAEA25, 0xCA6565AF, 0xF47A7A8E,
               0x47AEAEE9, 0x10080818, 0x6FBABAD5, 0xF0787888, 0x4A25256F,
               0x5C2E2E72, 0x381C1C24, 0x57A6A6F1, 0x73B4B4C7, 0x97C6C651,
               0xCBE8E823, 0xA1DDDD7C, 0xE874749C, 0x3E1F1F21, 0x964B4BDD,
               0x61BDBDDC, 0xD8B8B86, 0xF8A8A85, 0xE0707090, 0x7C3E3E42,
               0x71B5B5C4, 0xCC6666AA, 0x904848D8, 0x6030305, 0xF7F6F601,
               0x1C0E0E12, 0xC26161A3, 0x6A35355F, 0xAE5757F9, 0x69B9B9D0,
               0x17868691, 0x99C1C158, 0x3A1D1D27, 0x279E9EB9, 0xD9E1E138,
               0xEBF8F813, 0x2B9898B3, 0x22111133, 0xD26969BB, 0xA9D9D970,
               0x78E8E89, 0x339494A7, 0x2D9B9BB6, 0x3C1E1E22, 0x15878792,
               0xC9E9E920, 0x87CECE49, 0xAA5555FF, 0x50282878, 0xA5DFDF7A,
               0x38C8C8F, 0x59A1A1F8, 0x9898980, 0x1A0D0D17, 0x65BFBFDA,
               0xD7E6E631, 0x844242C6, 0xD06868B8, 0x824141C3, 0x299999B0,
               0x5A2D2D77, 0x1E0F0F11, 0x7BB0B0CB, 0xA85454FC, 0x6DBBBBD6,
               0x2C16163A]

byte_84C60 = [0x63, 0x63, 0xC6, 0xA5, 0x7C, 0x7C, 0xF8, 0x84, 0x77,
              0x77, 0xEE, 0x99, 0x7B, 0x7B, 0xF6, 0x8D, 0xF2, 0xF2,
              0xFF, 0xD, 0x6B, 0x6B, 0xD6, 0xBD, 0x6F, 0x6F, 0xDE,
              0xB1, 0xC5, 0xC5, 0x91, 0x54, 0x30, 0x30, 0x60, 0x50,
              1, 1, 2, 3, 0x67, 0x67, 0xCE, 0xA9, 0x2B, 0x2B, 0x56,
              0x7D, 0xFE, 0xFE, 0xE7, 0x19, 0xD7, 0xD7, 0xB5, 0x62,
              0xAB, 0xAB, 0x4D, 0xE6, 0x76, 0x76, 0xEC, 0x9A, 0xCA,
              0xCA, 0x8F, 0x45, 0x82, 0x82, 0x1F, 0x9D, 0xC9, 0xC9,
              0x89, 0x40, 0x7D, 0x7D, 0xFA, 0x87, 0xFA, 0xFA, 0xEF,
              0x15, 0x59, 0x59, 0xB2, 0xEB, 0x47, 0x47, 0x8E, 0xC9,
              0xF0, 0xF0, 0xFB, 0xB, 0xAD, 0xAD, 0x41, 0xEC, 0xD4,
              0xD4, 0xB3, 0x67, 0xA2, 0xA2, 0x5F, 0xFD, 0xAF, 0xAF,
              0x45, 0xEA, 0x9C, 0x9C, 0x23, 0xBF, 0xA4, 0xA4, 0x53,
              0xF7, 0x72, 0x72, 0xE4, 0x96, 0xC0, 0xC0, 0x9B, 0x5B,
              0xB7, 0xB7, 0x75, 0xC2, 0xFD, 0xFD, 0xE1, 0x1C, 0x93,
              0x93, 0x3D, 0xAE, 0x26, 0x26, 0x4C, 0x6A, 0x36, 0x36,
              0x6C, 0x5A, 0x3F, 0x3F, 0x7E, 0x41, 0xF7, 0xF7, 0xF5,
              2, 0xCC, 0xCC, 0x83, 0x4F, 0x34, 0x34, 0x68, 0x5C,
              0xA5, 0xA5, 0x51, 0xF4, 0xE5, 0xE5, 0xD1, 0x34, 0xF1,
              0xF1, 0xF9, 8, 0x71, 0x71, 0xE2, 0x93, 0xD8, 0xD8,
              0xAB, 0x73, 0x31, 0x31, 0x62, 0x53, 0x15, 0x15, 0x2A,
              0x3F, 4, 4, 8, 0xC, 0xC7, 0xC7, 0x95, 0x52, 0x23, 0x23,
              0x46, 0x65, 0xC3, 0xC3, 0x9D, 0x5E, 0x18, 0x18, 0x30,
              0x28, 0x96, 0x96, 0x37, 0xA1, 5, 5, 0xA, 0xF, 0x9A,
              0x9A, 0x2F, 0xB5, 7, 7, 0xE, 9, 0x12, 0x12, 0x24, 0x36,
              0x80, 0x80, 0x1B, 0x9B, 0xE2, 0xE2, 0xDF, 0x3D, 0xEB,
              0xEB, 0xCD, 0x26, 0x27, 0x27, 0x4E, 0x69, 0xB2, 0xB2,
              0x7F, 0xCD, 0x75, 0x75, 0xEA, 0x9F, 9, 9, 0x12, 0x1B,
              0x83, 0x83, 0x1D, 0x9E, 0x2C, 0x2C, 0x58, 0x74, 0x1A,
              0x1A, 0x34, 0x2E, 0x1B, 0x1B, 0x36, 0x2D, 0x6E, 0x6E,
              0xDC, 0xB2, 0x5A, 0x5A, 0xB4, 0xEE, 0xA0, 0xA0, 0x5B,
              0xFB, 0x52, 0x52, 0xA4, 0xF6, 0x3B, 0x3B, 0x76, 0x4D,
              0xD6, 0xD6, 0xB7, 0x61, 0xB3, 0xB3, 0x7D, 0xCE, 0x29,
              0x29, 0x52, 0x7B, 0xE3, 0xE3, 0xDD, 0x3E, 0x2F, 0x2F,
              0x5E, 0x71, 0x84, 0x84, 0x13, 0x97, 0x53, 0x53, 0xA6,
              0xF5, 0xD1, 0xD1, 0xB9, 0x68, 0, 0, 0, 0, 0xED, 0xED,
              0xC1, 0x2C, 0x20, 0x20, 0x40, 0x60, 0xFC, 0xFC, 0xE3,
              0x1F, 0xB1, 0xB1, 0x79, 0xC8, 0x5B, 0x5B, 0xB6, 0xED,
              0x6A, 0x6A, 0xD4, 0xBE, 0xCB, 0xCB, 0x8D, 0x46, 0xBE,
              0xBE, 0x67, 0xD9, 0x39, 0x39, 0x72, 0x4B, 0x4A, 0x4A,
              0x94, 0xDE, 0x4C, 0x4C, 0x98, 0xD4, 0x58, 0x58, 0xB0,
              0xE8, 0xCF, 0xCF, 0x85, 0x4A, 0xD0, 0xD0, 0xBB, 0x6B,
              0xEF, 0xEF, 0xC5, 0x2A, 0xAA, 0xAA, 0x4F, 0xE5, 0xFB,
              0xFB, 0xED, 0x16, 0x43, 0x43, 0x86, 0xC5, 0x4D, 0x4D,
              0x9A, 0xD7, 0x33, 0x33, 0x66, 0x55, 0x85, 0x85, 0x11,
              0x94, 0x45, 0x45, 0x8A, 0xCF, 0xF9, 0xF9, 0xE9, 0x10,
              2, 2, 4, 6, 0x7F, 0x7F, 0xFE, 0x81, 0x50, 0x50, 0xA0,
              0xF0, 0x3C, 0x3C, 0x78, 0x44, 0x9F, 0x9F, 0x25, 0xBA,
              0xA8, 0xA8, 0x4B, 0xE3, 0x51, 0x51, 0xA2, 0xF3, 0xA3,
              0xA3, 0x5D, 0xFE, 0x40, 0x40, 0x80, 0xC0, 0x8F, 0x8F,
              5, 0x8A, 0x92, 0x92, 0x3F, 0xAD, 0x9D, 0x9D, 0x21,
              0xBC, 0x38, 0x38, 0x70, 0x48, 0xF5, 0xF5, 0xF1, 4,
              0xBC, 0xBC, 0x63, 0xDF, 0xB6, 0xB6, 0x77, 0xC1, 0xDA,
              0xDA, 0xAF, 0x75, 0x21, 0x21, 0x42, 0x63, 0x10, 0x10,
              0x20, 0x30, 0xFF, 0xFF, 0xE5, 0x1A, 0xF3, 0xF3, 0xFD,
              0xE, 0xD2, 0xD2, 0xBF, 0x6D, 0xCD, 0xCD, 0x81, 0x4C,
              0xC, 0xC, 0x18, 0x14, 0x13, 0x13, 0x26, 0x35, 0xEC,
              0xEC, 0xC3, 0x2F, 0x5F, 0x5F, 0xBE, 0xE1, 0x97, 0x97,
              0x35, 0xA2, 0x44, 0x44, 0x88, 0xCC, 0x17, 0x17, 0x2E,
              0x39, 0xC4, 0xC4, 0x93, 0x57, 0xA7, 0xA7, 0x55, 0xF2,
              0x7E, 0x7E, 0xFC, 0x82, 0x3D, 0x3D, 0x7A, 0x47, 0x64,
              0x64, 0xC8, 0xAC, 0x5D, 0x5D, 0xBA, 0xE7, 0x19, 0x19,
              0x32, 0x2B, 0x73, 0x73, 0xE6, 0x95, 0x60, 0x60, 0xC0,
              0xA0, 0x81, 0x81, 0x19, 0x98, 0x4F, 0x4F, 0x9E, 0xD1,
              0xDC, 0xDC, 0xA3, 0x7F, 0x22, 0x22, 0x44, 0x66, 0x2A,
              0x2A, 0x54, 0x7E, 0x90, 0x90, 0x3B, 0xAB, 0x88, 0x88,
              0xB, 0x83, 0x46, 0x46, 0x8C, 0xCA, 0xEE, 0xEE, 0xC7,
              0x29, 0xB8, 0xB8, 0x6B, 0xD3, 0x14, 0x14, 0x28, 0x3C,
              0xDE, 0xDE, 0xA7, 0x79, 0x5E, 0x5E, 0xBC, 0xE2, 0xB,
              0xB, 0x16, 0x1D, 0xDB, 0xDB, 0xAD, 0x76, 0xE0, 0xE0,
              0xDB, 0x3B, 0x32, 0x32, 0x64, 0x56, 0x3A, 0x3A, 0x74,
              0x4E, 0xA, 0xA, 0x14, 0x1E, 0x49, 0x49, 0x92, 0xDB,
              6, 6, 0xC, 0xA, 0x24, 0x24, 0x48, 0x6C, 0x5C, 0x5C,
              0xB8, 0xE4, 0xC2, 0xC2, 0x9F, 0x5D, 0xD3, 0xD3, 0xBD,
              0x6E, 0xAC, 0xAC, 0x43, 0xEF, 0x62, 0x62, 0xC4, 0xA6,
              0x91, 0x91, 0x39, 0xA8, 0x95, 0x95, 0x31, 0xA4, 0xE4,
              0xE4, 0xD3, 0x37, 0x79, 0x79, 0xF2, 0x8B, 0xE7, 0xE7,
              0xD5, 0x32, 0xC8, 0xC8, 0x8B, 0x43, 0x37, 0x37, 0x6E,
              0x59, 0x6D, 0x6D, 0xDA, 0xB7, 0x8D, 0x8D, 1, 0x8C,
              0xD5, 0xD5, 0xB1, 0x64, 0x4E, 0x4E, 0x9C, 0xD2, 0xA9,
              0xA9, 0x49, 0xE0, 0x6C, 0x6C, 0xD8, 0xB4, 0x56, 0x56,
              0xAC, 0xFA, 0xF4, 0xF4, 0xF3, 7, 0xEA, 0xEA, 0xCF,
              0x25, 0x65, 0x65, 0xCA, 0xAF, 0x7A, 0x7A, 0xF4, 0x8E,
              0xAE, 0xAE, 0x47, 0xE9, 8, 8, 0x10, 0x18, 0xBA, 0xBA,
              0x6F, 0xD5, 0x78, 0x78, 0xF0, 0x88, 0x25, 0x25, 0x4A,
              0x6F, 0x2E, 0x2E, 0x5C, 0x72, 0x1C, 0x1C, 0x38, 0x24,
              0xA6, 0xA6, 0x57, 0xF1, 0xB4, 0xB4, 0x73, 0xC7, 0xC6,
              0xC6, 0x97, 0x51, 0xE8, 0xE8, 0xCB, 0x23, 0xDD, 0xDD,
              0xA1, 0x7C, 0x74, 0x74, 0xE8, 0x9C, 0x1F, 0x1F, 0x3E,
              0x21, 0x4B, 0x4B, 0x96, 0xDD, 0xBD, 0xBD, 0x61, 0xDC,
              0x8B, 0x8B, 0xD, 0x86, 0x8A, 0x8A, 0xF, 0x85, 0x70,
              0x70, 0xE0, 0x90, 0x3E, 0x3E, 0x7C, 0x42, 0xB5, 0xB5,
              0x71, 0xC4, 0x66, 0x66, 0xCC, 0xAA, 0x48, 0x48, 0x90,
              0xD8, 3, 3, 6, 5, 0xF6, 0xF6, 0xF7, 1, 0xE, 0xE, 0x1C,
              0x12, 0x61, 0x61, 0xC2, 0xA3, 0x35, 0x35, 0x6A, 0x5F,
              0x57, 0x57, 0xAE, 0xF9, 0xB9, 0xB9, 0x69, 0xD0, 0x86,
              0x86, 0x17, 0x91, 0xC1, 0xC1, 0x99, 0x58, 0x1D, 0x1D,
              0x3A, 0x27, 0x9E, 0x9E, 0x27, 0xB9, 0xE1, 0xE1, 0xD9,
              0x38, 0xF8, 0xF8, 0xEB, 0x13, 0x98, 0x98, 0x2B, 0xB3,
              0x11, 0x11, 0x22, 0x33, 0x69, 0x69, 0xD2, 0xBB, 0xD9,
              0xD9, 0xA9, 0x70, 0x8E, 0x8E, 7, 0x89, 0x94, 0x94,
              0x33, 0xA7, 0x9B, 0x9B, 0x2D, 0xB6, 0x1E, 0x1E, 0x3C,
              0x22, 0x87, 0x87, 0x15, 0x92, 0xE9, 0xE9, 0xC9, 0x20,
              0xCE, 0xCE, 0x87, 0x49, 0x55, 0x55, 0xAA, 0xFF, 0x28,
              0x28, 0x50, 0x78, 0xDF, 0xDF, 0xA5, 0x7A, 0x8C, 0x8C,
              3, 0x8F, 0xA1, 0xA1, 0x59, 0xF8, 0x89, 0x89, 9, 0x80,
              0xD, 0xD, 0x1A, 0x17, 0xBF, 0xBF, 0x65, 0xDA, 0xE6,
              0xE6, 0xD7, 0x31, 0x42, 0x42, 0x84, 0xC6, 0x68, 0x68,
              0xD0, 0xB8, 0x41, 0x41, 0x82, 0xC3, 0x99, 0x99, 0x29,
              0xB0, 0x2D, 0x2D, 0x5A, 0x77, 0xF, 0xF, 0x1E, 0x11,
              0xB0, 0xB0, 0x7B, 0xCB, 0x54, 0x54, 0xA8, 0xFC, 0xBB,
              0xBB, 0x6D, 0xD6, 0x16, 0x16, 0x2C, 0x3A]

dword_85060 = [0x12310000, 0x2000100, 0x4020000, 0x8020200, 0x10102000,
               0x30020400, 0x40002000, 0x80002000, 0x1B002000, 0x36200200]

dword_85088 = [0x51F4A750, 0x7E416553, 0x1A17A4C3, 0x3A275E96, 0x3BAB6BCB,
               0x1F9D45F1, 0xACFA58AB, 0x4BE30393, 0x2030FA55, 0xAD766DF6,
               0x88CC7691, 0xF5024C25, 0x4FE5D7FC, 0xC52ACBD7, 0x26354480,
               0xB562A38F, 0xDEB15A49, 0x25BA1B67, 0x45EA0E98, 0x5DFEC0E1,
               0xC32F7502, 0x814CF012, 0x8D4697A3, 0x6BD3F9C6, 0x38F5FE7,
               0x15929C95, 0xBF6D7AEB, 0x955259DA, 0xD4BE832D, 0x587421D3,
               0x49E06929, 0x8EC9C844, 0x75C2896A, 0xF48E7978, 0x99583E6B,
               0x27B971DD, 0xBEE14FB6, 0xF088AD17, 0xC920AC66, 0x7DCE3AB4,
               0x63DF4A18, 0xE51A3182, 0x97513360, 0x62537F45, 0xB16477E0,
               0xBB6BAE84, 0xFE81A01C, 0xF9082B94, 0x70486858, 0x8F45FD19,
               0x94DE6C87, 0x527BF8B7, 0xAB73D323, 0x724B02E2, 0xE31F8F57,
               0x6655AB2A, 0xB2EB2807, 0x2FB5C203, 0x86C57B9A, 0xD33708A5,
               0x302887F2, 0x23BFA5B2, 0x2036ABA, 0xED16825C, 0x8ACF1C2B,
               0xA779B492, 0xF307F2F0, 0x4E69E2A1, 0x65DAF4CD, 0x605BED5,
               0xD134621F, 0xC4A6FE8A, 0x342E539D, 0xA2F355A0, 0x58AE132,
               0xA4F6EB75, 0xB83EC39, 0x4060EFAA, 0x5E719F06, 0xBD6E1051,
               0x3E218AF9, 0x96DD063D, 0xDD3E05AE, 0x4DE6BD46, 0x91548DB5,
               0x71C45D05, 0x406D46F, 0x605015FF, 0x1998FB24, 0xD6BDE997,
               0x894043CC, 0x67D99E77, 0xB0E842BD, 0x7898B88, 0xE7195B38,
               0x79C8EEDB, 0xA17C0A47, 0x7C420FE9, 0xF8841EC9, 0,
               0x9808683, 0x322BED48, 0x1E1170AC, 0x6C5A724E, 0xFD0EFFFB,
               0xF853856, 0x3DAED51E, 0x362D3927, 0xA0FD964, 0x685CA621,
               0x9B5B54D1, 0x24362E3A, 0xC0A67B1, 0x9357E70F, 0xB4EE96D2,
               0x1B9B919E, 0x80C0C54F, 0x61DC20A2, 0x5A774B69, 0x1C121A16,
               0xE293BA0A, 0xC0A02AE5, 0x3C22E043, 0x121B171D, 0xE090D0B,
               0xF28BC7AD, 0x2DB6A8B9, 0x141EA9C8, 0x57F11985, 0xAF75074C,
               0xEE99DDBB, 0xA37F60FD, 0xF701269F, 0x5C72F5BC, 0x44663BC5,
               0x5BFB7E34, 0x8B432976, 0xCB23C6DC, 0xB6EDFC68, 0xB8E4F163,
               0xD731DCCA, 0x42638510, 0x13972240, 0x84C61120, 0x854A247D,
               0xD2BB3DF8, 0xAEF93211, 0xC729A16D, 0x1D9E2F4B, 0xDCB230F3,
               0xD8652EC, 0x77C1E3D0, 0x2BB3166C, 0xA970B999, 0x119448FA,
               0x47E96422, 0xA8FC8CC4, 0xA0F03F1A, 0x567D2CD8, 0x223390EF,
               0x87494EC7, 0xD938D1C1, 0x8CCAA2FE, 0x98D40B36, 0xA6F581CF,
               0xA57ADE28, 0xDAB78E26, 0x3FADBFA4, 0x2C3A9DE4, 0x5078920D,
               0x6A5FCC9B, 0x547E4662, 0xF68D13C2, 0x90D8B8E8, 0x2E39F75E,
               0x82C3AFF5, 0x9F5D80BE, 0x69D0937C, 0x6FD52DA9, 0xCF2512B3,
               0xC8AC993B, 0x10187DA7, 0xE89C636E, 0xDB3BBB7B, 0xCD267809,
               0x6E5918F4, 0xEC9AB701, 0x834F9AA8, 0xE6956E65, 0xAAFFE67E,
               0x21BCCF08, 0xEF15E8E6, 0xBAE79BD9, 0x4A6F36CE, 0xEA9F09D4,
               0x29B07CD6, 0x31A4B2AF, 0x2A3F2331, 0xC6A59430, 0x35A266C0,
               0x744EBC37, 0xFC82CAA6, 0xE090D0B0, 0x33A7D815, 0xF104984A,
               0x41ECDAF7, 0x7FCD500E, 0x1791F62F, 0x764DD68D, 0x43EFB04D,
               0xCCAA4D54, 0xE49604DF, 0x9ED1B5E3, 0x4C6A881B, 0xC12C1FB8,
               0x4665517F, 0x9D5EEA04, 0x18C355D, 0xFA877473, 0xFB0B412E,
               0xB3671D5A, 0x92DBD252, 0xE9105633, 0x6DD64713, 0x9AD7618C,
               0x37A10C7A, 0x59F8148E, 0xEB133C89, 0xCEA927EE, 0xB761C935,
               0xE11CE5ED, 0x7A47B13C, 0x9CD2DF59, 0x55F2733F, 0x1814CE79,
               0x73C737BF, 0x53F7CDEA, 0x5FFDAA5B, 0xDF3D6F14, 0x7844DB86,
               0xCAAFF381, 0xB968C43E, 0x3824342C, 0xC2A3405F, 0x161DC372,
               0xBCE2250C, 0x283C498B, 0xFF0D9541, 0x39A80171, 0x80CB3DE,
               0xD8B4E49C, 0x6456C190, 0x7BCB8461, 0xD532B670, 0x486C5C74,
               0xD0B85742]

dword_85488 = [0x5051F4A7, 0x537E4165, 0xC31A17A4, 0x963A275E, 0xCB3BAB6B,
               0xF11F9D45, 0xABACFA58, 0x934BE303, 0x552030FA, 0xF6AD766D,
               0x9188CC76, 0x25F5024C, 0xFC4FE5D7, 0xD7C52ACB, 0x80263544,
               0x8FB562A3, 0x49DEB15A, 0x6725BA1B, 0x9845EA0E, 0xE15DFEC0,
               0x2C32F75, 0x12814CF0, 0xA38D4697, 0xC66BD3F9, 0xE7038F5F,
               0x9515929C, 0xEBBF6D7A, 0xDA955259, 0x2DD4BE83, 0xD3587421,
               0x2949E069, 0x448EC9C8, 0x6A75C289, 0x78F48E79, 0x6B99583E,
               0xDD27B971, 0xB6BEE14F, 0x17F088AD, 0x66C920AC, 0xB47DCE3A,
               0x1863DF4A, 0x82E51A31, 0x60975133, 0x4562537F, 0xE0B16477,
               0x84BB6BAE, 0x1CFE81A0, 0x94F9082B, 0x58704868, 0x198F45FD,
               0x8794DE6C, 0xB7527BF8, 0x23AB73D3, 0xE2724B02, 0x57E31F8F,
               0x2A6655AB, 0x7B2EB28, 0x32FB5C2, 0x9A86C57B, 0xA5D33708,
               0xF2302887, 0xB223BFA5, 0xBA02036A, 0x5CED1682, 0x2B8ACF1C,
               0x92A779B4, 0xF0F307F2, 0xA14E69E2, 0xCD65DAF4, 0xD50605BE,
               0x1FD13462, 0x8AC4A6FE, 0x9D342E53, 0xA0A2F355, 0x32058AE1,
               0x75A4F6EB, 0x390B83EC, 0xAA4060EF, 0x65E719F, 0x51BD6E10,
               0xF93E218A, 0x3D96DD06, 0xAEDD3E05, 0x464DE6BD, 0xB591548D,
               0x571C45D, 0x6F0406D4, 0xFF605015, 0x241998FB, 0x97D6BDE9,
               0xCC894043, 0x7767D99E, 0xBDB0E842, 0x8807898B, 0x38E7195B,
               0xDB79C8EE, 0x47A17C0A, 0xE97C420F, 0xC9F8841E, 0,
               0x83098086, 0x48322BED, 0xAC1E1170, 0x4E6C5A72, 0xFBFD0EFF,
               0x560F8538, 0x1E3DAED5, 0x27362D39, 0x640A0FD9, 0x21685CA6,
               0xD19B5B54, 0x3A24362E, 0xB10C0A67, 0xF9357E7, 0xD2B4EE96,
               0x9E1B9B91, 0x4F80C0C5, 0xA261DC20, 0x695A774B, 0x161C121A,
               0xAE293BA, 0xE5C0A02A, 0x433C22E0, 0x1D121B17, 0xB0E090D,
               0xADF28BC7, 0xB92DB6A8, 0xC8141EA9, 0x8557F119, 0x4CAF7507,
               0xBBEE99DD, 0xFDA37F60, 0x9FF70126, 0xBC5C72F5, 0xC544663B,
               0x345BFB7E, 0x768B4329, 0xDCCB23C6, 0x68B6EDFC, 0x63B8E4F1,
               0xCAD731DC, 0x10426385, 0x40139722, 0x2084C611, 0x7D854A24,
               0xF8D2BB3D, 0x11AEF932, 0x6DC729A1, 0x4B1D9E2F, 0xF3DCB230,
               0xEC0D8652, 0xD077C1E3, 0x6C2BB316, 0x99A970B9, 0xFA119448,
               0x2247E964, 0xC4A8FC8C, 0x1AA0F03F, 0xD8567D2C, 0xEF223390,
               0xC787494E, 0xC1D938D1, 0xFE8CCAA2, 0x3698D40B, 0xCFA6F581,
               0x28A57ADE, 0x26DAB78E, 0xA43FADBF, 0xE42C3A9D, 0xD507892,
               0x9B6A5FCC, 0x62547E46, 0xC2F68D13, 0xE890D8B8, 0x5E2E39F7,
               0xF582C3AF, 0xBE9F5D80, 0x7C69D093, 0xA96FD52D, 0xB3CF2512,
               0x3BC8AC99, 0xA710187D, 0x6EE89C63, 0x7BDB3BBB, 0x9CD2678,
               0xF46E5918, 0x1EC9AB7, 0xA8834F9A, 0x65E6956E, 0x7EAAFFE6,
               0x821BCCF, 0xE6EF15E8, 0xD9BAE79B, 0xCE4A6F36, 0xD4EA9F09,
               0xD629B07C, 0xAF31A4B2, 0x312A3F23, 0x30C6A594, 0xC035A266,
               0x37744EBC, 0xA6FC82CA, 0xB0E090D0, 0x1533A7D8, 0x4AF10498,
               0xF741ECDA, 0xE7FCD50, 0x2F1791F6, 0x8D764DD6, 0x4D43EFB0,
               0x54CCAA4D, 0xDFE49604, 0xE39ED1B5, 0x1B4C6A88, 0xB8C12C1F,
               0x7F466551, 0x49D5EEA, 0x5D018C35, 0x73FA8774, 0x2EFB0B41,
               0x5AB3671D, 0x5292DBD2, 0x33E91056, 0x136DD647, 0x8C9AD761,
               0x7A37A10C, 0x8E59F814, 0x89EB133C, 0xEECEA927, 0x35B761C9,
               0xEDE11CE5, 0x3C7A47B1, 0x599CD2DF, 0x3F55F273, 0x791814CE,
               0xBF73C737, 0xEA53F7CD, 0x5B5FFDAA, 0x14DF3D6F, 0x867844DB,
               0x81CAAFF3, 0x3EB968C4, 0x2C382434, 0x5FC2A340, 0x72161DC3,
               0xCBCE225, 0x8B283C49, 0x41FF0D95, 0x7139A801, 0xDE080CB3,
               0x9CD8B4E4, 0x906456C1, 0x617BCB84, 0x70D532B6, 0x74486C5C,
               0x42D0B857]

dword_85888 = [0xA75051F4, 0x65537E41, 0xA4C31A17, 0x5E963A27, 0x6BCB3BAB,
               0x45F11F9D, 0x58ABACFA, 0x3934BE3, 0xFA552030, 0x6DF6AD76,
               0x769188CC, 0x4C25F502, 0xD7FC4FE5, 0xCBD7C52A, 0x44802635,
               0xA38FB562, 0x5A49DEB1, 0x1B6725BA, 0xE9845EA, 0xC0E15DFE,
               0x7502C32F, 0xF012814C, 0x97A38D46, 0xF9C66BD3, 0x5FE7038F,
               0x9C951592, 0x7AEBBF6D, 0x59DA9552, 0x832DD4BE, 0x21D35874,
               0x692949E0, 0xC8448EC9, 0x896A75C2, 0x7978F48E, 0x3E6B9958,
               0x71DD27B9, 0x4FB6BEE1, 0xAD17F088, 0xAC66C920, 0x3AB47DCE,
               0x4A1863DF, 0x3182E51A, 0x33609751, 0x7F456253, 0x77E0B164,
               0xAE84BB6B, 0xA01CFE81, 0x2B94F908, 0x68587048, 0xFD198F45,
               0x6C8794DE, 0xF8B7527B, 0xD323AB73, 0x2E2724B, 0x8F57E31F,
               0xAB2A6655, 0x2807B2EB, 0xC2032FB5, 0x7B9A86C5, 0x8A5D337,
               0x87F23028, 0xA5B223BF, 0x6ABA0203, 0x825CED16, 0x1C2B8ACF,
               0xB492A779, 0xF2F0F307, 0xE2A14E69, 0xF4CD65DA, 0xBED50605,
               0x621FD134, 0xFE8AC4A6, 0x539D342E, 0x55A0A2F3, 0xE132058A,
               0xEB75A4F6, 0xEC390B83, 0xEFAA4060, 0x9F065E71, 0x1051BD6E,
               0x8AF93E21, 0x63D96DD, 0x5AEDD3E, 0xBD464DE6, 0x8DB59154,
               0x5D0571C4, 0xD46F0406, 0x15FF6050, 0xFB241998, 0xE997D6BD,
               0x43CC8940, 0x9E7767D9, 0x42BDB0E8, 0x8B880789, 0x5B38E719,
               0xEEDB79C8, 0xA47A17C, 0xFE97C42, 0x1EC9F884, 0, 0x86830980,
               0xED48322B, 0x70AC1E11, 0x724E6C5A, 0xFFFBFD0E, 0x38560F85,
               0xD51E3DAE, 0x3927362D, 0xD9640A0F, 0xA621685C, 0x54D19B5B,
               0x2E3A2436, 0x67B10C0A, 0xE70F9357, 0x96D2B4EE, 0x919E1B9B,
               0xC54F80C0, 0x20A261DC, 0x4B695A77, 0x1A161C12, 0xBA0AE293,
               0x2AE5C0A0, 0xE0433C22, 0x171D121B, 0xD0B0E09, 0xC7ADF28B,
               0xA8B92DB6, 0xA9C8141E, 0x198557F1, 0x74CAF75, 0xDDBBEE99,
               0x60FDA37F, 0x269FF701, 0xF5BC5C72, 0x3BC54466, 0x7E345BFB,
               0x29768B43, 0xC6DCCB23, 0xFC68B6ED, 0xF163B8E4, 0xDCCAD731,
               0x85104263, 0x22401397, 0x112084C6, 0x247D854A, 0x3DF8D2BB,
               0x3211AEF9, 0xA16DC729, 0x2F4B1D9E, 0x30F3DCB2, 0x52EC0D86,
               0xE3D077C1, 0x166C2BB3, 0xB999A970, 0x48FA1194, 0x642247E9,
               0x8CC4A8FC, 0x3F1AA0F0, 0x2CD8567D, 0x90EF2233, 0x4EC78749,
               0xD1C1D938, 0xA2FE8CCA, 0xB3698D4, 0x81CFA6F5, 0xDE28A57A,
               0x8E26DAB7, 0xBFA43FAD, 0x9DE42C3A, 0x920D5078, 0xCC9B6A5F,
               0x4662547E, 0x13C2F68D, 0xB8E890D8, 0xF75E2E39, 0xAFF582C3,
               0x80BE9F5D, 0x937C69D0, 0x2DA96FD5, 0x12B3CF25, 0x993BC8AC,
               0x7DA71018, 0x636EE89C, 0xBB7BDB3B, 0x7809CD26, 0x18F46E59,
               0xB701EC9A, 0x9AA8834F, 0x6E65E695, 0xE67EAAFF, 0xCF0821BC,
               0xE8E6EF15, 0x9BD9BAE7, 0x36CE4A6F, 0x9D4EA9F, 0x7CD629B0,
               0xB2AF31A4, 0x23312A3F, 0x9430C6A5, 0x66C035A2, 0xBC37744E,
               0xCAA6FC82, 0xD0B0E090, 0xD81533A7, 0x984AF104, 0xDAF741EC,
               0x500E7FCD, 0xF62F1791, 0xD68D764D, 0xB04D43EF, 0x4D54CCAA,
               0x4DFE496, 0xB5E39ED1, 0x881B4C6A, 0x1FB8C12C, 0x517F4665,
               0xEA049D5E, 0x355D018C, 0x7473FA87, 0x412EFB0B, 0x1D5AB367,
               0xD25292DB, 0x5633E910, 0x47136DD6, 0x618C9AD7, 0xC7A37A1,
               0x148E59F8, 0x3C89EB13, 0x27EECEA9, 0xC935B761, 0xE5EDE11C,
               0xB13C7A47, 0xDF599CD2, 0x733F55F2, 0xCE791814, 0x37BF73C7,
               0xCDEA53F7, 0xAA5B5FFD, 0x6F14DF3D, 0xDB867844, 0xF381CAAF,
               0xC43EB968, 0x342C3824, 0x405FC2A3, 0xC372161D, 0x250CBCE2,
               0x498B283C, 0x9541FF0D, 0x17139A8, 0xB3DE080C, 0xE49CD8B4,
               0xC1906456, 0x84617BCB, 0xB670D532, 0x5C74486C, 0x5742D0B8]

dword_85C88 = bytes_to_int32(
    [0x51, 0x50, 0xA7, 0xF4, 0x7E, 0x53, 0x65, 0x41, 0x1A, 0xC3, 0xA4, 0x17, 0x3A, 0x96, 0x5E, 0x27, 0x3B, 0xCB, 0x6B,
     0xAB, 0x1F, 0xF1, 0x45, 0x9D, 0xAC, 0xAB, 0x58, 0xFA, 0x4B, 0x93, 3, 0xE3, 0x20, 0x55, 0xFA, 0x30, 0xAD, 0xF6,
     0x6D, 0x76, 0x88, 0x91, 0x76, 0xCC, 0xF5, 0x25, 0x4C, 2, 0x4F, 0xFC, 0xD7, 0xE5, 0xC5, 0xD7, 0xCB, 0x2A, 0x26,
     0x80, 0x44, 0x35, 0xB5, 0x8F, 0xA3, 0x62, 0xDE, 0x49, 0x5A, 0xB1, 0x25, 0x67, 0x1B, 0xBA, 0x45, 0x98, 0xE, 0xEA,
     0x5D, 0xE1, 0xC0, 0xFE, 0xC3, 2, 0x75, 0x2F, 0x81, 0x12, 0xF0, 0x4C, 0x8D, 0xA3, 0x97, 0x46, 0x6B, 0xC6, 0xF9,
     0xD3, 3, 0xE7, 0x5F, 0x8F, 0x15, 0x95, 0x9C, 0x92, 0xBF, 0xEB, 0x7A, 0x6D, 0x95, 0xDA, 0x59, 0x52, 0xD4, 0x2D,
     0x83, 0xBE, 0x58, 0xD3, 0x21, 0x74, 0x49, 0x29, 0x69, 0xE0, 0x8E, 0x44, 0xC8, 0xC9, 0x75, 0x6A, 0x89, 0xC2, 0xF4,
     0x78, 0x79, 0x8E, 0x99, 0x6B, 0x3E, 0x58, 0x27, 0xDD, 0x71, 0xB9, 0xBE, 0xB6, 0x4F, 0xE1, 0xF0, 0x17, 0xAD, 0x88,
     0xC9, 0x66, 0xAC, 0x20, 0x7D, 0xB4, 0x3A, 0xCE, 0x63, 0x18, 0x4A, 0xDF, 0xE5, 0x82, 0x31, 0x1A, 0x97, 0x60, 0x33,
     0x51, 0x62, 0x45, 0x7F, 0x53, 0xB1, 0xE0, 0x77, 0x64, 0xBB, 0x84, 0xAE, 0x6B, 0xFE, 0x1C, 0xA0, 0x81, 0xF9, 0x94,
     0x2B, 8, 0x70, 0x58, 0x68, 0x48, 0x8F, 0x19, 0xFD, 0x45, 0x94, 0x87, 0x6C, 0xDE, 0x52, 0xB7, 0xF8, 0x7B, 0xAB,
     0x23, 0xD3, 0x73, 0x72, 0xE2, 2, 0x4B, 0xE3, 0x57, 0x8F, 0x1F, 0x66, 0x2A, 0xAB, 0x55, 0xB2, 7, 0x28, 0xEB, 0x2F,
     3, 0xC2, 0xB5, 0x86, 0x9A, 0x7B, 0xC5, 0xD3, 0xA5, 8, 0x37, 0x30, 0xF2, 0x87, 0x28, 0x23, 0xB2, 0xA5, 0xBF, 2,
     0xBA, 0x6A, 3, 0xED, 0x5C, 0x82, 0x16, 0x8A, 0x2B, 0x1C, 0xCF, 0xA7, 0x92, 0xB4, 0x79, 0xF3, 0xF0, 0xF2, 7, 0x4E,
     0xA1, 0xE2, 0x69, 0x65, 0xCD, 0xF4, 0xDA, 6, 0xD5, 0xBE, 5, 0xD1, 0x1F, 0x62, 0x34, 0xC4, 0x8A, 0xFE, 0xA6, 0x34,
     0x9D, 0x53, 0x2E, 0xA2, 0xA0, 0x55, 0xF3, 5, 0x32, 0xE1, 0x8A, 0xA4, 0x75, 0xEB, 0xF6, 0xB, 0x39, 0xEC, 0x83, 0x40,
     0xAA, 0xEF, 0x60, 0x5E, 6, 0x9F, 0x71, 0xBD, 0x51, 0x10, 0x6E, 0x3E, 0xF9, 0x8A, 0x21, 0x96, 0x3D, 6, 0xDD, 0xDD,
     0xAE, 5, 0x3E, 0x4D, 0x46, 0xBD, 0xE6, 0x91, 0xB5, 0x8D, 0x54, 0x71, 5, 0x5D, 0xC4, 4, 0x6F, 0xD4, 6, 0x60, 0xFF,
     0x15, 0x50, 0x19, 0x24, 0xFB, 0x98, 0xD6, 0x97, 0xE9, 0xBD, 0x89, 0xCC, 0x43, 0x40, 0x67, 0x77, 0x9E, 0xD9, 0xB0,
     0xBD, 0x42, 0xE8, 7, 0x88, 0x8B, 0x89, 0xE7, 0x38, 0x5B, 0x19, 0x79, 0xDB, 0xEE, 0xC8, 0xA1, 0x47, 0xA, 0x7C, 0x7C,
     0xE9, 0xF, 0x42, 0xF8, 0xC9, 0x1E, 0x84, 0, 0, 0, 0, 9, 0x83, 0x86, 0x80, 0x32, 0x48, 0xED, 0x2B, 0x1E, 0xAC, 0x70,
     0x11, 0x6C, 0x4E, 0x72, 0x5A, 0xFD, 0xFB, 0xFF, 0xE, 0xF, 0x56, 0x38, 0x85, 0x3D, 0x1E, 0xD5, 0xAE, 0x36, 0x27,
     0x39, 0x2D, 0xA, 0x64, 0xD9, 0xF, 0x68, 0x21, 0xA6, 0x5C, 0x9B, 0xD1, 0x54, 0x5B, 0x24, 0x3A, 0x2E, 0x36, 0xC,
     0xB1,
     0x67, 0xA, 0x93, 0xF, 0xE7, 0x57, 0xB4, 0xD2, 0x96, 0xEE, 0x1B, 0x9E, 0x91, 0x9B, 0x80, 0x4F, 0xC5, 0xC0, 0x61,
     0xA2, 0x20, 0xDC, 0x5A, 0x69, 0x4B, 0x77, 0x1C, 0x16, 0x1A, 0x12, 0xE2, 0xA, 0xBA, 0x93, 0xC0, 0xE5, 0x2A, 0xA0,
     0x3C, 0x43, 0xE0, 0x22, 0x12, 0x1D, 0x17, 0x1B, 0xE, 0xB, 0xD, 9, 0xF2, 0xAD, 0xC7, 0x8B, 0x2D, 0xB9, 0xA8, 0xB6,
     0x14, 0xC8, 0xA9, 0x1E, 0x57, 0x85, 0x19, 0xF1, 0xAF, 0x4C, 7, 0x75, 0xEE, 0xBB, 0xDD, 0x99, 0xA3, 0xFD, 0x60,
     0x7F,
     0xF7, 0x9F, 0x26, 1, 0x5C, 0xBC, 0xF5, 0x72, 0x44, 0xC5, 0x3B, 0x66, 0x5B, 0x34, 0x7E, 0xFB, 0x8B, 0x76, 0x29,
     0x43,
     0xCB, 0xDC, 0xC6, 0x23, 0xB6, 0x68, 0xFC, 0xED, 0xB8, 0x63, 0xF1, 0xE4, 0xD7, 0xCA, 0xDC, 0x31, 0x42, 0x10, 0x85,
     0x63, 0x13, 0x40, 0x22, 0x97, 0x84, 0x20, 0x11, 0xC6, 0x85, 0x7D, 0x24, 0x4A, 0xD2, 0xF8, 0x3D, 0xBB, 0xAE, 0x11,
     0x32, 0xF9, 0xC7, 0x6D, 0xA1, 0x29, 0x1D, 0x4B, 0x2F, 0x9E, 0xDC, 0xF3, 0x30, 0xB2, 0xD, 0xEC, 0x52, 0x86, 0x77,
     0xD0, 0xE3, 0xC1, 0x2B, 0x6C, 0x16, 0xB3, 0xA9, 0x99, 0xB9, 0x70, 0x11, 0xFA, 0x48, 0x94, 0x47, 0x22, 0x64, 0xE9,
     0xA8, 0xC4, 0x8C, 0xFC, 0xA0, 0x1A, 0x3F, 0xF0, 0x56, 0xD8, 0x2C, 0x7D, 0x22, 0xEF, 0x90, 0x33, 0x87, 0xC7, 0x4E,
     0x49, 0xD9, 0xC1, 0xD1, 0x38, 0x8C, 0xFE, 0xA2, 0xCA, 0x98, 0x36, 0xB, 0xD4, 0xA6, 0xCF, 0x81, 0xF5, 0xA5, 0x28,
     0xDE, 0x7A, 0xDA, 0x26, 0x8E, 0xB7, 0x3F, 0xA4, 0xBF, 0xAD, 0x2C, 0xE4, 0x9D, 0x3A, 0x50, 0xD, 0x92, 0x78, 0x6A,
     0x9B, 0xCC, 0x5F, 0x54, 0x62, 0x46, 0x7E, 0xF6, 0xC2, 0x13, 0x8D, 0x90, 0xE8, 0xB8, 0xD8, 0x2E, 0x5E, 0xF7, 0x39,
     0x82, 0xF5, 0xAF, 0xC3, 0x9F, 0xBE, 0x80, 0x5D, 0x69, 0x7C, 0x93, 0xD0, 0x6F, 0xA9, 0x2D, 0xD5, 0xCF, 0xB3, 0x12,
     0x25, 0xC8, 0x3B, 0x99, 0xAC, 0x10, 0xA7, 0x7D, 0x18, 0xE8, 0x6E, 0x63, 0x9C, 0xDB, 0x7B, 0xBB, 0x3B, 0xCD, 9,
     0x78,
     0x26, 0x6E, 0xF4, 0x18, 0x59, 0xEC, 1, 0xB7, 0x9A, 0x83, 0xA8, 0x9A, 0x4F, 0xE6, 0x65, 0x6E, 0x95, 0xAA, 0x7E,
     0xE6,
     0xFF, 0x21, 8, 0xCF, 0xBC, 0xEF, 0xE6, 0xE8, 0x15, 0xBA, 0xD9, 0x9B, 0xE7, 0x4A, 0xCE, 0x36, 0x6F, 0xEA, 0xD4, 9,
     0x9F, 0x29, 0xD6, 0x7C, 0xB0, 0x31, 0xAF, 0xB2, 0xA4, 0x2A, 0x31, 0x23, 0x3F, 0xC6, 0x30, 0x94, 0xA5, 0x35, 0xC0,
     0x66, 0xA2, 0x74, 0x37, 0xBC, 0x4E, 0xFC, 0xA6, 0xCA, 0x82, 0xE0, 0xB0, 0xD0, 0x90, 0x33, 0x15, 0xD8, 0xA7, 0xF1,
     0x4A, 0x98, 4, 0x41, 0xF7, 0xDA, 0xEC, 0x7F, 0xE, 0x50, 0xCD, 0x17, 0x2F, 0xF6, 0x91, 0x76, 0x8D, 0xD6, 0x4D, 0x43,
     0x4D, 0xB0, 0xEF, 0xCC, 0x54, 0x4D, 0xAA, 0xE4, 0xDF, 4, 0x96, 0x9E, 0xE3, 0xB5, 0xD1, 0x4C, 0x1B, 0x88, 0x6A,
     0xC1,
     0xB8, 0x1F, 0x2C, 0x46, 0x7F, 0x51, 0x65, 0x9D, 4, 0xEA, 0x5E, 1, 0x5D, 0x35, 0x8C, 0xFA, 0x73, 0x74, 0x87, 0xFB,
     0x2E, 0x41, 0xB, 0xB3, 0x5A, 0x1D, 0x67, 0x92, 0x52, 0xD2, 0xDB, 0xE9, 0x33, 0x56, 0x10, 0x6D, 0x13, 0x47, 0xD6,
     0x9A, 0x8C, 0x61, 0xD7, 0x37, 0x7A, 0xC, 0xA1, 0x59, 0x8E, 0x14, 0xF8, 0xEB, 0x89, 0x3C, 0x13, 0xCE, 0xEE, 0x27,
     0xA9, 0xB7, 0x35, 0xC9, 0x61, 0xE1, 0xED, 0xE5, 0x1C, 0x7A, 0x3C, 0xB1, 0x47, 0x9C, 0x59, 0xDF, 0xD2, 0x55, 0x3F,
     0x73, 0xF2, 0x18, 0x79, 0xCE, 0x14, 0x73, 0xBF, 0x37, 0xC7, 0x53, 0xEA, 0xCD, 0xF7, 0x5F, 0x5B, 0xAA, 0xFD, 0xDF,
     0x14, 0x6F, 0x3D, 0x78, 0x86, 0xDB, 0x44, 0xCA, 0x81, 0xF3, 0xAF, 0xB9, 0x3E, 0xC4, 0x68, 0x38, 0x2C, 0x34, 0x24,
     0xC2, 0x5F, 0x40, 0xA3, 0x16, 0x72, 0xC3, 0x1D, 0xBC, 0xC, 0x25, 0xE2, 0x28, 0x8B, 0x49, 0x3C, 0xFF, 0x41, 0x95,
     0xD, 0x39, 0x71, 1, 0xA8, 8, 0xDE, 0xB3, 0xC, 0xD8, 0x9C, 0xE4, 0xB4, 0x64, 0x90, 0xC1, 0x56, 0x7B, 0x61, 0x84,
     0xCB, 0xD5, 0x70, 0xB6, 0x32, 0x48, 0x74, 0x5C, 0x6C, 0xD0, 0x42, 0x57, 0xB8])

byte_86088 = [0x52, 9, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF,
              0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB, 0x7C, 0xE3,
              0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43,
              0x44, 0xC4, 0xDE, 0xE9, 0xCB, 0x54, 0x7B, 0x94, 0x32,
              0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0xB, 0x42,
              0xFA, 0xC3, 0x4E, 8, 0x2E, 0xA1, 0x66, 0x28, 0xD9,
              0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1,
              0x25, 0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16,
              0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92, 0x6C,
              0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15,
              0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84, 0x90, 0xD8, 0xAB,
              0, 0x8C, 0xBC, 0xD3, 0xA, 0xF7, 0xE4, 0x58, 5, 0xB8,
              0xB3, 0x45, 6, 0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F,
              0xF, 2, 0xC1, 0xAF, 0xBD, 3, 1, 0x13, 0x8A, 0x6B, 0x3A,
              0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2,
              0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73, 0x96, 0xAC, 0x74,
              0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8,
              0x1C, 0x75, 0xDF, 0x6E, 0x47, 0xF1, 0x1A, 0x71, 0x1D,
              0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0xE, 0xAA, 0x18,
              0xBE, 0x1B, 0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79,
              0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
              0x1F, 0xDD, 0xA8, 0x33, 0x88, 7, 0xC7, 0x31, 0xB1,
              0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F, 0x60, 0x51,
              0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0xD, 0x2D, 0xE5, 0x7A,
              0x9F, 0x93, 0xC9, 0x9C, 0xEF, 0xA0, 0xE0, 0x3B, 0x4D,
              0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83,
              0x53, 0x99, 0x61, 0x17, 0x2B, 4, 0x7E, 0xBA, 0x77,
              0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0xC,
              0x7D]


def sub_2af14(a1, a3):
    a1 = bytes_to_int32(a1)
    a3 = bytes_to_int32(a3)

    a3[60] = 10

    a3[0] = b_swap32(a1[0]) ^ 0xF1892131
    a3[1] = b_swap32(a1[1]) ^ 0xFF001123
    a3[2] = b_swap32(a1[2]) ^ 0xF1001356
    a3[3] = b_swap32(a1[3]) ^ 0xF1234890

    v1 = 0
    v8 = 0

    while True:
        v3 = a3[v1 + 3]
        a3[v1 + 4] = reduce(xor, [
            a3[v1 + 0],
            dword_84060[(v3 >> 16) & 0xFF] & 0xFF000000,
            dword_84460[(v3 % 2 ** 16) >> 8] & 0xFF0000,
            dword_84860[v3 % 2 ** 8] & 0xFF00,
            byte_84C60[4 * (v3 >> 24)],
            dword_85060[v8]
        ])
        a3[v1 + 5] = a3[v1 + 1] ^ a3[v1 + 4]
        a3[v1 + 6] = a3[v1 + 2] ^ a3[v1 + 5]
        a3[v1 + 7] = a3[v1 + 3] ^ a3[v1 + 6]
        v8 += 1
        if v8 == 10:
            break
        v1 += 4

    return int32_to_bytes(a3)


def sub_2b2d0(a3):
    a3 = bytes_to_int32(a3)

    v13 = 0
    i = 4 * a3[60]
    while v13 < i:
        for j in range(4):
            v3 = a3[v13 + j]
            a3[v13 + j] = a3[i + j]
            a3[i + j] = v3
        v13 += 4
        i -= 4

    v15 = 0
    i = 1

    while i < a3[60]:
        v15 += 4
        a3[v15] = reduce(xor, [
            dword_85C88[byte_84C60[4 * (a3[v15] % 2 ** 8)]],
            dword_85088[byte_84C60[4 * (a3[v15] >> 24)]],
            dword_85488[byte_84C60[4 * ((a3[v15] >> 16) & 0xFF)]],
            dword_85888[byte_84C60[4 * (a3[v15] % (2 ** 16) >> 8)]]
        ])
        a3[v15 + 1] = reduce(xor, [
            dword_85C88[byte_84C60[4 * (a3[v15 + 1] % 2 ** 8)]],
            dword_85088[byte_84C60[4 * (a3[v15 + 1] >> 24)]],
            dword_85488[byte_84C60[4 * ((a3[v15 + 1] >> 16) & 0xFF)]],
            dword_85888[byte_84C60[4 * (a3[v15 + 1] % (2 ** 16) >> 8)]]
        ])
        a3[v15 + 2] = reduce(xor, [
            dword_85C88[byte_84C60[4 * (a3[v15 + 2] % 2 ** 8)]],
            dword_85088[byte_84C60[4 * (a3[v15 + 2] >> 24)]],
            dword_85488[byte_84C60[4 * ((a3[v15 + 2] >> 16) & 0xFF)]],
            dword_85888[byte_84C60[4 * (a3[v15 + 2] % (2 ** 16) >> 8)]]
        ])
        a3[v15 + 3] = reduce(xor, [
            dword_85C88[byte_84C60[4 * (a3[v15 + 3] % 2 ** 8)]],
            dword_85088[byte_84C60[4 * (a3[v15 + 3] >> 24)]],
            dword_85488[byte_84C60[4 * ((a3[v15 + 3] >> 16) & 0xFF)]],
            dword_85888[byte_84C60[4 * (a3[v15 + 3] % (2 ** 16) >> 8)]]
        ])
        i += 1

    return int32_to_bytes(a3)


def sub_2b954(a1, a2, a3):
    a1 = bytes_to_int32(a1)
    a3 = bytes_to_int32(a3)

    v17 = 0
    v16 = b_swap32(a1[0]) ^ a3[0]
    v15 = b_swap32(a1[1]) ^ a3[1]
    v14 = b_swap32(a1[2]) ^ a3[2]
    v13 = b_swap32(a1[3]) ^ a3[3]
    v8 = a3[60] >> 1

    while True:
        v12 = reduce(xor, [
            dword_85088[v16 >> 24],
            dword_85488[(v13 >> 16) & 0xFF],
            dword_85888[(v14 % 2 ** 16) >> 8],
            dword_85C88[v15 % 2 ** 8],
            a3[v17 + 4],
        ])
        v11 = reduce(xor, [
            dword_85088[v15 >> 24],
            dword_85488[(v16 >> 16) & 0xFF],
            dword_85888[(v13 % 2 ** 16) >> 8],
            dword_85C88[v14 % 2 ** 8],
            a3[v17 + 5],
        ])
        v10 = reduce(xor, [
            dword_85088[v14 >> 24],
            dword_85488[(v15 >> 16) & 0xFF],
            dword_85888[(v16 % 2 ** 16) >> 8],
            dword_85C88[v13 % 2 ** 8],
            a3[v17 + 6],
        ])
        v9 = reduce(xor, [
            dword_85088[v13 >> 24],
            dword_85488[(v14 >> 16) & 0xFF],
            dword_85888[(v15 % 2 ** 16) >> 8],
            dword_85C88[v16 % 2 ** 8],
            a3[v17 + 7],
        ])

        v17 += 8
        v8 -= 1
        if not v8:
            break

        v16 = reduce(xor, [
            dword_85088[v12 >> 24],
            dword_85488[(v9 >> 16) & 0xFF],
            dword_85888[(v10 % 2 ** 16) >> 8],
            dword_85C88[v11 % 2 ** 8],
            a3[v17],
        ])
        v15 = reduce(xor, [
            dword_85088[v11 >> 24],
            dword_85488[(v12 >> 16) & 0xFF],
            dword_85888[(v9 % 2 ** 16) >> 8],
            dword_85C88[v10 % 2 ** 8],
            a3[v17 + 1],
        ])
        v14 = reduce(xor, [
            dword_85088[v10 >> 24],
            dword_85488[(v11 >> 16) & 0xFF],
            dword_85888[(v12 % 2 ** 16) >> 8],
            dword_85C88[v9 % 2 ** 8],
            a3[v17 + 2],
        ])
        v13 = reduce(xor, [
            dword_85088[v9 >> 24],
            dword_85488[(v10 >> 16) & 0xFF],
            dword_85888[(v11 % 2 ** 16) >> 8],
            dword_85C88[v12 % 2 ** 8],
            a3[v17 + 3],
        ])

    v3 = reduce(or_, [
        byte_86088[byte_n(v12, 3)] << 24,
        byte_86088[byte_n(v9, 2)] << 16,
        byte_86088[(v10 % 2 ** 16) >> 8] << 8,
        byte_86088[(v11 % 2 ** 8)]
    ]) ^ a3[v17]

    a2[0] = byte_n(v3, 3)
    a2[1] = byte_n(v3, 2)
    a2[2] = byte_n(v3, 1)
    a2[3] = byte_n(v3, 0)

    v4 = reduce(or_, [
        byte_86088[byte_n(v11, 3)] << 24,
        byte_86088[byte_n(v12, 2)] << 16,
        byte_86088[(v9 % 2 ** 16) >> 8] << 8,
        byte_86088[(v10 % 2 ** 8)]
    ]) ^ a3[v17 + 1]

    a2[4] = byte_n(v4, 3)
    a2[5] = byte_n(v4, 2)
    a2[6] = byte_n(v4, 1)
    a2[7] = byte_n(v4, 0)

    v5 = reduce(or_, [
        byte_86088[byte_n(v10, 3)] << 24,
        byte_86088[byte_n(v11, 2)] << 16,
        byte_86088[(v12 % 2 ** 16) >> 8] << 8,
        byte_86088[(v9 % 2 ** 8)]
    ]) ^ a3[v17 + 2]

    a2[8] = byte_n(v5, 3)
    a2[9] = byte_n(v5, 2)
    a2[10] = byte_n(v5, 1)
    a2[11] = byte_n(v5, 0)

    v6 = reduce(or_, [
        byte_86088[byte_n(v9, 3)] << 24,
        byte_86088[byte_n(v10, 2)] << 16,
        byte_86088[(v11 % 2 ** 16) >> 8] << 8,
        byte_86088[(v12 % 2 ** 8)]
    ]) ^ a3[v17 + 3]

    a2[12] = byte_n(v6, 3)
    a2[13] = byte_n(v6, 2)
    a2[14] = byte_n(v6, 1)
    a2[15] = byte_n(v6, 0)

    return a2


def sub_2be2c(a1, a2, a3, a4, a7):
    a1 = bytes_to_int32(a1)
    a2 = bytes_to_int32(a2)
    a4 = bytes_to_int32(a4)

    v1 = 0
    v2 = 0
    v16 = bytearray(16)

    while a3:
        v16 = sub_2b954(int32_to_bytes(a1[v1:]), v16, int32_to_bytes(a4))

        i = 0
        while True:
            v10 = 0
            if i <= 0xF:
                v8 = 0
                if i < a3:
                    v8 = 1
                v10 = v8
            if not (v10 << 31):
                break

            a2[v2 + i] = v16[i] ^ a7[i]
            a7[i] = byte_n(bytes_to_int32(int32_to_bytes(a1)[i:])[v1], 0)
            i += 1

        a3 -= 16
        v1 += 4
        v2 += 16

        if a3 <= 0x10:
            while i <= 0xF:
                a7[i] = byte_n(bytes_to_int32(int32_to_bytes(a1)[i:])[v1], 0)
                i += 1
            break

    return a2


def sub_aaac(a1, a2):
    a1 = base64.b64decode(a1)

    v1 = [ord(t) for i, t in enumerate(a2) if i < 16]
    v2 = [0 for _ in range(256)]

    v2 = sub_2af14(v1, v2)

    v2 = sub_2b2d0(v2)

    v3 = bytearray(512)

    v3 = sub_2be2c(a1, v3, len(a1), v2, bytearray(256))

    return v3[16:80]


def make_ctx(a1, a2):
    v2 = sub_aaac(a1, a2)

    v1 = [118, 84, 50, 16, 254, 220, 186, 152, 137, 171, 205, 239, 1, 35, 69, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 164, 106, 215, 86, 183,
          199, 232, 219, 112, 32, 36, 238, 206, 189, 193, 175, 15, 124, 245, 42, 198, 135, 71, 19, 70, 48, 168, 1, 149,
          70, 253, 216, 152, 128, 105, 175, 247, 68, 139, 177, 91, 255, 255, 190, 215, 92, 137, 34, 17, 144, 107, 147,
          113, 152, 253, 142, 67, 121, 166, 33, 8, 180, 73, 98, 37, 30, 246, 64, 179, 64, 192, 81, 90, 94, 38, 170, 199,
          182, 233, 93, 16, 47, 214, 83, 20, 68, 2, 129, 230, 161, 216, 200, 251, 211, 231, 230, 205, 225, 33, 214, 7,
          55, 195, 135, 13, 213, 244, 237, 20, 90, 69, 5, 233, 227, 169, 248, 163, 239, 252, 217, 2, 111, 103, 138, 76,
          42, 141, 66, 57, 250, 255, 129, 246, 113, 135, 34, 97, 157, 109, 12, 56, 229, 253, 68, 234, 190, 164, 169,
          207, 222, 75, 96, 75, 187, 246, 112, 188, 191, 190, 198, 126, 155, 40, 250, 39, 161, 234, 133, 48, 239, 212,
          5, 29, 136, 4, 57, 208, 212, 217, 229, 153, 219, 230, 248, 124, 162, 31, 101, 86, 172, 196, 68, 34, 41, 244,
          151, 255, 42, 67, 167, 35, 148, 171, 57, 160, 147, 252, 195, 89, 91, 101, 146, 204, 12, 143, 125, 244, 239,
          255, 209, 93, 132, 133, 79, 126, 168, 111, 224, 230, 44, 254, 20, 67, 1, 163, 161, 17, 8, 78, 130, 126, 83,
          247, 53, 242, 58, 189, 187, 210, 215, 42, 145, 211, 134, 235, 0, 0, 0, 0]

    ctx = [bytearray(v1), bytearray(v1), bytearray(v1)]

    ctx[0] = sub_2cc42(ctx[0], [t ^ 0x36 for t in v2], 0x40)
    ctx[1] = sub_2cc42(ctx[1], [t ^ 0x36 for t in v2], 0x40)
    ctx[2] = sub_2cc42(ctx[2], [t ^ 0x5C for t in v2], 0x40)

    return ctx


def sub_604db(a1):
    for i in range(4):
        a1[8 + i] = 0xFF


def sub_a6e8(a1, a2, a3):
    v3, v5, v6, v8 = a1, a2, 0, 0

    while True:
        v8 = v5[v6]
        if int.from_bytes(v3[8:12], 'little', signed=False) > 0:
            sub_604db(a1)

        v3[12 + 2 * v6] = data_a798[v8 >> 4]

        v10 = v5[v6]

        if int.from_bytes(v3[8:12], 'little', signed=False) > 0:
            sub_604db(a1)

        v3[12 + 2 * v6 + 1] = data_a798[v10 & 0xF]

        v6 += 1
        if v6 >= a3:
            break


def sub_abb8():
    v15 = bytearray(45)
    v17 = bytearray([187, 197, 152, 57, 144, 47, 56, 83, 99, 121, 252, 203, 124, 139, 35, 19])

    v15[0] = 0x20
    v15[4] = 0x20
    v15[8] = 0x00

    for i in range(32):
        v15[12 + i] = 0x20

    v15[44] = 0x00

    sub_a6e8(v15, v17, 0x10)

    return v15


def __ror4__(value, count):
    nbits = 32
    value %= 2 ** nbits
    low = value << (nbits - count)
    value >>= count
    value |= low
    return value


def sub_2cda0(a1, a2, a3):
    a1 = bytes_to_int32(a1)

    v205 = a1
    v204 = a3
    v203 = 0
    v202 = a1[0]
    v201 = a1[1]
    v200 = a1[2]

    i = a1[3]
    while True:
        r = v204
        v204 -= 1
        if not r:
            break
        a2_2 = a2
        v4 = v203
        v5 = v203 + 1
        v6 = a2[v4]
        v7 = v5
        v5 += 1
        v8 = v6 | (a2_2[v7] << 8)
        v9 = v5
        v5 += 1
        v10 = v8 | (a2_2[v9] << 16)
        v11 = v5
        v5 += 1
        v12 = v10 | (a2_2[v11] << 24)
        v13 = v5
        v5 += 1
        v14 = a2_2[v13]
        v15 = v5
        v5 += 1
        v16 = v14 | (a2_2[v15] << 8)
        v17 = v5
        v5 += 1
        v18 = v16 | (a2_2[v17] << 16)
        v19 = v5
        v5 += 1
        v20 = v18 | (a2_2[v19] << 24)
        v21 = v201 + __ror4__(v12 + v205[23] + ((v200 ^ i) & v201 ^ i) + v202, 26)
        v22 = v5
        v5 += 1
        v23 = a2_2[v22]
        v24 = v5
        v5 += 1
        v25 = v23 | (a2_2[v24] << 8)
        v26 = v5
        v5 += 1
        v27 = v25 | (a2_2[v26] << 16)
        v28 = v5
        v5 += 1
        v29 = v27 | (a2_2[v28] << 24)
        v30 = v21 + __ror4__(v20 + v205[24] + ((v201 ^ v200) & v21 ^ v200) + i, 19)
        v31 = v5
        v5 += 1
        v32 = a2_2[v31]
        v33 = v5
        v5 += 1
        v34 = v32 | (a2_2[v33] << 8)
        v35 = v5
        v5 += 1
        v36 = v34 | (a2_2[v35] << 16)
        v37 = v5
        v5 += 1
        v38 = v36 | (a2_2[v37] << 24)
        v39 = v30 + __ror4__(v29 + v205[25] + ((v21 ^ v201) & v30 ^ v201) + v200, 15)
        v40 = v5
        v5 += 1
        v41 = a2_2[v40]
        v42 = v5
        v5 += 1
        v43 = v41 | (a2_2[v42] << 8)
        v44 = v5
        v5 += 1
        v45 = v43 | (a2_2[v44] << 16)
        v46 = v5
        v5 += 1
        v47 = v45 | (a2_2[v46] << 24)
        v48 = v39 + __ror4__(v38 + v205[26] + ((v30 ^ v21) & v39 ^ v21) + v201, 11)
        v49 = v5
        v5 += 1
        v50 = a2_2[v49]
        v51 = v5
        v5 += 1
        v52 = v50 | (a2_2[v51] << 8)
        v53 = v5
        v5 += 1
        v54 = v52 | (a2_2[v53] << 16)
        v55 = v5
        v5 += 1
        v56 = v54 | (a2_2[v55] << 24)
        v57 = v48 + __ror4__(v47 + v205[27] + ((v39 ^ v30) & v48 ^ v30) + v21, 25)
        v58 = v5
        v5 += 1
        v59 = a2_2[v58]
        v60 = v5
        v5 += 1
        v61 = v59 | (a2_2[v60] << 8)
        v62 = v5
        v5 += 1
        v63 = v61 | (a2_2[v62] << 16)
        v64 = v5
        v5 += 1
        v65 = v63 | (a2_2[v64] << 24)
        v66 = v57 + __ror4__(v56 + v205[28] + ((v48 ^ v39) & v57 ^ v39) + v30, 20)
        v67 = v5
        v5 += 1
        v68 = a2_2[v67]
        v69 = v5
        v5 += 1
        v70 = v68 | (a2_2[v69] << 8)
        v71 = v5
        v5 += 1
        v72 = v70 | (a2_2[v71] << 16)
        v73 = v5
        v5 += 1
        v74 = v72 | (a2_2[v73] << 24)
        v75 = v66 + __ror4__(v65 + v205[29] + ((v57 ^ v48) & v66 ^ v48) + v39, 15)
        v76 = v5
        v5 += 1
        v77 = a2_2[v76]
        v78 = v5
        v5 += 1
        v79 = v77 | (a2_2[v78] << 8)
        v80 = v5
        v5 += 1
        v81 = v79 | (a2_2[v80] << 16)
        v82 = v5
        v5 += 1
        v83 = v81 | (a2_2[v82] << 24)
        v84 = v75 + __ror4__(v74 + v205[30] + ((v66 ^ v57) & v75 ^ v57) + v48, 12)
        v85 = v5
        v5 += 1
        v86 = a2_2[v85]
        v87 = v5
        v5 += 1
        v88 = v86 | (a2_2[v87] << 8)
        v89 = v5
        v5 += 1
        v90 = v88 | (a2_2[v89] << 16)
        v91 = v5
        v5 += 1
        v92 = v90 | (a2_2[v91] << 24)
        v93 = v84 + __ror4__(v83 + v205[31] + ((v75 ^ v66) & v84 ^ v66) + v57, 25)
        v94 = v5
        v5 += 1
        v95 = a2_2[v94]
        v96 = v5
        v5 += 1
        v97 = v95 | (a2_2[v96] << 8)
        v98 = v5
        v5 += 1
        v99 = v97 | (a2_2[v98] << 16)
        v100 = v5
        v5 += 1
        v101 = v99 | (a2_2[v100] << 24)
        v102 = v93 + __ror4__(v92 + v205[32] + ((v84 ^ v75) & v93 ^ v75) + v66, 20)
        v103 = v5
        v5 += 1
        v104 = a2_2[v103]
        v105 = v5
        v5 += 1
        v106 = v104 | (a2_2[v105] << 8)
        v107 = v5
        v5 += 1
        v108 = v106 | (a2_2[v107] << 16)
        v109 = v5
        v5 += 1
        v110 = v108 | (a2_2[v109] << 24)
        v111 = v102 + __ror4__(v101 + v205[33] + ((v93 ^ v84) & v102 ^ v84) + v75, 16)
        v112 = v5
        v5 += 1
        v113 = a2_2[v112]
        v114 = v5
        v5 += 1
        v115 = v113 | (a2_2[v114] << 8)
        v116 = v5
        v5 += 1
        v117 = v115 | (a2_2[v116] << 16)
        v118 = v5
        v5 += 1
        v119 = v117 | (a2_2[v118] << 24)
        v120 = v111 + __ror4__(v110 + v205[34] + ((v102 ^ v93) & v111 ^ v93) + v84, 10)
        v121 = v5
        v5 += 1
        v122 = a2_2[v121]
        v123 = v5
        v5 += 1
        v124 = v122 | (a2_2[v123] << 8)
        v125 = v5
        v5 += 1
        v126 = v124 | (a2_2[v125] << 16)
        v127 = v5
        v5 += 1
        v128 = v126 | (a2_2[v127] << 24)
        v129 = v120 + __ror4__(v119 + v205[35] + ((v111 ^ v102) & v120 ^ v102) + v93, 25)
        v130 = v5
        v5 += 1
        v131 = a2_2[v130]
        v132 = v5
        v5 += 1
        v133 = v131 | (a2_2[v132] << 8)
        v134 = v5
        v5 += 1
        v135 = v133 | (a2_2[v134] << 16)
        v136 = v5
        v5 += 1
        v137 = v135 | (a2_2[v136] << 24)
        v138 = v129 + __ror4__(v128 + v205[36] + ((v120 ^ v111) & v129 ^ v111) + v102, 19)
        v139 = v5
        v5 += 1
        v140 = a2_2[v139]
        v141 = v5
        v5 += 1
        v142 = v140 | (a2_2[v141] << 8) | (a2_2[v5] << 16)
        v143 = v5 + 1
        v203 = v5 + 2
        v144 = v142 | (a2_2[v143] << 24)
        v145 = v138 + __ror4__(v137 + v205[37] + ((v129 ^ v120) & v138 ^ v120) + v111, 15)
        v146 = v145 + __ror4__(v144 + v205[38] + ((v138 ^ v129) & v145 ^ v129) + v120, 10)
        v147 = v146 + __ror4__(v20 + (v205[39] & 0xFF00FF00) + ((v146 ^ v145) & v138 ^ v145) + v129, 27)
        v148 = v147 + __ror4__(v65 + v205[40] + ((v147 ^ v146) & v145 ^ v146) + v138, 23)
        v149 = v148 + __ror4__(v110 + v205[41] + ((v148 ^ v147) & v146 ^ v147) + v145, 18)
        v150 = v149 + __ror4__(v12 + (v205[42] & 0xFF0011FF) + ((v149 ^ v148) & v147 ^ v148) + v146, 12)
        v151 = v150 + __ror4__(v56 + v205[43] + ((v150 ^ v149) & v148 ^ v149) + v147, 27)
        v152 = v151 + __ror4__(v101 + v205[44] + ((v151 ^ v150) & v149 ^ v150) + v148, 23)
        v153 = v152 + __ror4__(v144 + v205[45] + ((v152 ^ v151) & v150 ^ v151) + v149, 18)
        v154 = v153 + __ror4__(v47 + v205[46] + ((v153 ^ v152) & v151 ^ v152) + v150, 12)
        v155 = v154 + __ror4__(v92 + v205[47] + ((v154 ^ v153) & v152 ^ v153) + v151, 27)
        v156 = v155 + __ror4__(v137 + v205[48] + ((v155 ^ v154) & v153 ^ v154) + v152, 23)
        v157 = v156 + __ror4__(v38 + v205[49] + ((v156 ^ v155) & v154 ^ v155) + v153, 18)
        v158 = v157 + __ror4__(v83 + v205[50] + ((v157 ^ v156) & v155 ^ v156) + v154, 12)
        v159 = v158 + __ror4__(v128 + v205[51] + ((v158 ^ v157) & v156 ^ v157) + v155, 27)
        v160 = v159 + __ror4__(v29 + (v205[52] & 0xFF110011) + ((v159 ^ v158) & v157 ^ v158) + v156, 23)
        v161 = v160 + __ror4__(v74 + v205[53] + ((v160 ^ v159) & v158 ^ v159) + v157, 18)
        v162 = v161 + __ror4__(v119 + v205[54] + ((v161 ^ v160) & v159 ^ v160) + v158, 12)
        v163 = v162 + __ror4__(v56 + v205[55] + (v162 ^ v161 ^ v160) + v159, 28)
        v164 = v163 + __ror4__(v83 + v205[56] + (v163 ^ v162 ^ v161) + v160, 21)
        v165 = v164 + __ror4__(v110 + v205[57] + (v164 ^ v163 ^ v162) + v161, 16)
        v166 = v165 + __ror4__(v137 + v205[58] + (v165 ^ v164 ^ v163) + v162, 9)
        v167 = v166 + __ror4__(v20 + v205[59] + (v166 ^ v165 ^ v164) + v163, 28)
        v168 = v167 + __ror4__(v47 + v205[60] + (v167 ^ v166 ^ v165) + v164, 21)
        v169 = v168 + __ror4__(v74 + v205[61] + (v168 ^ v167 ^ v166) + v165, 16)
        v170 = v166 + __ror4__(v128 + v205[63] + (v166 ^ v169 ^ v168) + v167, 28)
        v171 = v169 + __ror4__(v101 + v205[62] + (v169 ^ v168 ^ v170) + v166, 9)
        v172 = v168 + __ror4__(v38 + v205[65] + (v168 ^ v170 ^ v171) + v169, 16)
        v173 = v170 + __ror4__(v12 + v205[64] + (v170 ^ v171 ^ v172) + v168, 21)
        v174 = v172 + __ror4__(v65 + v205[66] + (v172 ^ v173 ^ v170) + v171, 9)
        v175 = v174 + __ror4__(v92 + v205[67] + (v174 ^ v172 ^ v173) + v170, 28)
        v176 = v175 + __ror4__(v119 + v205[68] + (v175 ^ v174 ^ v172) + v173, 21)
        v177 = v176 + __ror4__(v144 + v205[69] + (v176 ^ v175 ^ v174) + v172, 16)
        v178 = v177 + __ror4__(v29 + v205[70] + (v177 ^ v176 ^ v175) + v174, 9)
        v179 = v178 + __ror4__(v12 + v205[71] + ((v178 | ~v176) ^ v177) + v175, 26)
        v180 = v179 + __ror4__(v74 + v205[72] + ((v179 | ~v177) ^ v178) + v176, 22)
        v181 = v180 + __ror4__(v137 + v205[73] + ((v180 | ~v178) ^ v179) + v177, 17)
        v182 = v181 + __ror4__(v56 + v205[74] + ((v181 | ~v179) ^ v180) + v178, 11)
        v183 = v182 + __ror4__(v119 + v205[75] + ((v182 | ~v180) ^ v181) + v179, 26)
        v184 = v183 + __ror4__(v38 + v205[76] + ((v183 | ~v181) ^ v182) + v180, 22)
        v185 = v184 + __ror4__(v101 + v205[77] + ((v184 | ~v182) ^ v183) + v181, 17)
        v186 = v185 + __ror4__(v20 + v205[78] + ((v185 | ~v183) ^ v184) + v182, 11)
        v187 = v186 + __ror4__(v83 + v205[79] + ((v186 | ~v184) ^ v185) + v183, 26)
        v188 = v187 + __ror4__(v144 + v205[80] + ((v187 | ~v185) ^ v186) + v184, 22)
        v189 = v188 + __ror4__(v65 + v205[81] + ((v188 | ~v186) ^ v187) + v185, 17)
        v190 = v189 + __ror4__(v128 + v205[82] + ((v189 | ~v187) ^ v188) + v186, 11)
        v191 = v190 + __ror4__(v47 + v205[83] + ((v190 | ~v188) ^ v189) + v187, 26)
        v192 = v191 + __ror4__(v110 + v205[84] + ((v191 | ~v189) ^ v190) + v188, 22)
        v193 = v192 + __ror4__(v29 + v205[85] + ((v192 | ~v190) ^ v191) + v189, 17)
        v194 = v193 + __ror4__(v92 + v205[86] + ((v193 | ~v191) ^ v192) + v190, 11)
        v195 = v191 + v205[0]
        v205[0] = v195
        v202 = v195
        v196 = v194 + v205[1]
        v205[1] = v196
        v201 = v196
        v197 = v193 + v205[2]
        v205[2] = v197
        v200 = v197
        v198 = v192 + v205[3]
        v205[3] = v198
        i = v198

    return int32_to_bytes(a1)


def sub_2cc42(a1, a2, a3):
    a1 = bytes_to_int32(a1)

    v8 = a1[4] + 8 * a3
    if v8 < a1[4]:
        a1[5] += 1
    a1[5] += a3 >> 29
    a1[4] = v8
    v6 = a1[22]
    if v6:
        v9 = 6
        a1 = int32_to_bytes(a1)
        for i in range(64 - v6):
            a1[v9 * 4 + v6 + i] = a2[i]
        a1 = sub_2cda0(a1, a1[v9 * 4:], 1)
        a1 = bytes_to_int32(a1)
        v3 = 64 - v6
        a2 = a2[v3:]
        a3 -= v3
        a1[22] = 0
        for i in range(64):
            a1[v9 + i] = 0
    v7 = a3 >> 6
    if v7:
        a1 = int32_to_bytes(a1)
        a1 = sub_2cda0(a1, a2, v7)
        a1 = bytes_to_int32(a1)
        v4 = v7 << 6
        a2 = a2[v4:]
        a3 -= v4
    if a3:
        a1[22] = a3
        a1 = int32_to_bytes(a1)
        for i in range(a3):
            a1[24 + i] = a2[i]
        a1 = bytes_to_int32(a1)

    return int32_to_bytes(a1)


def sub_2dd88(a1, a2):
    v32 = 0
    v31 = 0
    v30 = 24
    a2 = bytes_to_int32(a2)
    v2 = a2[22]
    a2 = int32_to_bytes(a2)
    a2[v30 + v2] = 128
    v29 = v2 + 1
    if v29 >= 0x39:
        for i in range(64 - v29):
            a2[v30 + v29 + i] = 0
        v29 = 0
        a2 = sub_2cda0(a2, a2[24:], 1)
    for i in range(56 - v29):
        a2[v30 + v29 + i] = 0
    v3 = v30 + 56
    v4 = v3
    v3 += 1
    a2[v4] = read_int32(a2[v31 + 16:]) % 2 ** 8
    v5 = v3
    v3 += 1
    a2[v5] = (read_int16(a2[v31 + 16:]) >> 8) % 2 ** 8
    v6 = v3
    v3 += 1
    a2[v6] = read_int16(a2[v31 + 18:]) % 2 ** 8
    v7 = v3
    v3 += 1
    a2[v7] = a2[v31 + 19]
    v8 = v3
    v3 += 1
    a2[v8] = read_int32(a2[v31 + 20:]) % 2 ** 8
    v9 = v3
    v3 += 1
    a2[v9] = (read_int16(a2[v31 + 20:]) >> 8) % 2 ** 8
    v10 = v3
    v3 += 1
    a2[v10] = read_int16(a2[v31 + 22:]) % 2 ** 8
    a2[v3] = a2[v31 + 23]
    v3 -= 63
    a2 = sub_2cda0(a2[v31:], a2[v3:], 1)
    a2 = bytes_to_int32(a2)
    a2[(v31 + 88) // 4] = 0
    a2 = int32_to_bytes(a2)
    for i in range(64):
        a2[v3 + i] = 0
    v11 = read_int32(a2[v31:])
    v12 = v32
    v13 = v32 + 1
    a1[v12] = read_int32(a2[v31:]) % 2 ** 8
    v14 = v13
    v13 += 1
    a1[v14] = byte_n(v11, 1)
    v15 = v13
    v13 += 1
    a1[v15] = byte_n(v11, 2)
    v16 = v13
    v13 += 1
    a1[v16] = byte_n(v11, -1)
    v17 = read_int32(a2[v31 + 4:])
    v18 = v13
    v13 += 1
    a1[v18] = v17 % 2 ** 8
    v19 = v13
    v13 += 1
    a1[v19] = byte_n(v17, 1)
    v20 = v13
    v13 += 1
    a1[v20] = byte_n(v17, 2)
    v21 = v13
    v13 += 1
    a1[v21] = byte_n(v17, -1)
    v22 = read_int32(a2[v31 + 8:])
    v23 = v13
    v13 += 1
    a1[v23] = v22 % 2 ** 8
    v24 = v13
    v13 += 1
    a1[v24] = byte_n(v22, 1)
    v25 = v13
    v13 += 1
    a1[v25] = byte_n(v22, 2)
    a1[v13] = byte_n(v22, -1)
    v26 = read_int32(a2[v31 + 12:])
    a1[v13 + 1] = v26 % 2 ** 8
    a1[v13 + 2] = byte_n(v26, 1)
    a1[v13 + 3] = byte_n(v26, -2)
    a1[v13 + 4] = byte_n(v26, -1)

    return a1, a2


def get_sign(path='', params='', xy_common_params='', xy_platform_info='', data='', content='',
             main_hmac='', device_id=''):
    """
    生成签名
    """
    ctx = make_ctx(main_hmac, device_id)

    content = bytearray(content, encoding='utf-8') or bytearray(
        ''.join([path, params, xy_common_params, xy_platform_info, data]), encoding='utf-8')

    t1 = bytearray(16)
    t2 = bytearray(44)

    ctx[0] = sub_2cc42(ctx[0], content, len(content))
    t1, ctx[0] = sub_2dd88(t1, ctx[0])
    ctx[0] = ctx[2].copy()
    ctx[0] = sub_2cc42(ctx[0], t1, 16)
    t1, ctx[0] = sub_2dd88(t1, ctx[0])
    sub_a6e8(t2, t1, 16)

    sign = bytes(t2[12:]).decode('utf-8')
    return sign
